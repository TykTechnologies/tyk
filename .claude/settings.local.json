{
  "permissions": {
    "allow": [
      "Bash(rg:*)",
      "Bash(go test:*)",
      "Bash(TYK_LOGLEVEL=debug go test -run TestReadinessEndpointInEmergencyMode ./gateway -v)",
      "Bash(grep:*)",
      "Bash(TYK_LOGLEVEL=debug go test -run TestRealisticEmergencyModeTriggeredByRPCFailure ./gateway -v)",
      "Bash(git add:*)",
      "Bash(find:*)",
      "Bash(timeout 30s go test -v -run TestHealthCheckDuringCascadingFailures/redis_then_rpc_cascade ./gateway)",
      "Bash(timeout 30s go test -v -run TestHealthCheckDuringCascadingFailures ./gateway)",
      "Bash(timeout 60s go test -v -run TestHealthCheckDuringCascadingFailures ./gateway)",
      "Bash(timeout 30s go test -v -run TestHealthCheckDuringCascadingFailures/recovery_order_matters ./gateway)",
      "Bash(timeout 90s go test -v -run TestHealthCheckDuringCascadingFailures ./gateway)",
      "Bash(timeout 30s go test -v -run TestHealthCheckDuringCascadingFailures/redis_cascade_simulation ./gateway)",
      "Bash(timeout 30s go test -v -run TestHealthCheckDuringCascadingFailures/critical_failure_logic ./gateway)",
      "Bash(timeout 30s go test -v -run TestHealthCheckDuringCascadingFailures/health_status_transitions ./gateway)",
      "Bash(git ls-tree:*)",
      "Bash(cp:*)",
      "Bash(git rm:*)",
      "Bash(mv:*)",
      "Bash(git commit:*)",
      "Bash(ls:*)",
      "Bash(rm:*)",
      "Bash(git push:*)",
      "Bash(task lint:golangci-lint:fix:*)",
      "Bash(go vet:*)",
      "Bash(go run:*)",
      "Bash(timeout:*)",
      "Bash(TYK_LOGLEVEL=debug go test -v -timeout 30s -run TestHealthCheckDuringCascadingFailures/dashboard_failure_impact/UseDBAppConfigs_enabled ./gateway)",
      "Bash(for i in {1..3})",
      "Bash(do echo \"=== Run $i ===\")",
      "Bash(done)",
      "Bash(CI=true go test --timeout 30s --tags ee --run \"TestPublicKeyPinning/Enable_Common_Name_check\" ./gateway -v)",
      "Bash(for i in {1..5})",
      "Bash(if [ $? -ne 0 ])",
      "Bash(then echo \"FAILED at run $i\")",
      "Bash(break)",
      "Bash(fi)",
      "Bash(GOMAXPROCS=1 go test --timeout 30s --tags ee --run TestSSLForceCommonName -v)",
      "Bash(go env:*)",
      "Bash(do echo \"Test run $i:\")",
      "Bash(do echo \"Run $i:\")",
      "Bash(TYK_LOGLEVEL=debug go test -v -run \"Test_Issue12865\" -timeout 120s)",
      "Bash(TYK_LOGLEVEL=debug go test -v -run \"TestReloadGoroutineLeakWithTest|TestReloadGoroutineLeakWithCircuitBreaker\" -timeout 120s)",
      "Bash(TYK_LOGLEVEL=debug go test -v -timeout 120s)",
      "Bash(TYK_LOGLEVEL=debug go test -v -run \"TestReloadGoroutineLeakWithTest|TestReloadGoroutineLeakWithCircuitBreaker\" -timeout 60s)",
      "Bash(echo:*)",
      "Bash(sed:*)",
      "Bash(for file in mw_auth_key_test.go mw_basic_auth_test.go mw_jwt_test.go mw_external_oauth_test.go mw_redis_cache_test.go)",
      "Bash(do echo \"Fixing $file\")",
      "Bash(for file in mw_transform_test.go mw_url_rewrite_test.go mw_validate_json_test.go mw_granular_access_test.go)",
      "Bash(for:*)",
      "Bash(do if [ -f \"$file\" ])",
      "Bash(then echo \"Fixing $file\")",
      "Bash(else echo \"File $file does not exist\")",
      "Bash(go clean:*)",
      "Bash(go build:*)",
      "Bash(git reset:*)",
      "Bash(git stash:*)",
      "Bash(git checkout:*)",
      "Bash(git pull:*)",
      "Bash(git apply:*)"
    ],
    "deny": []
  }
}