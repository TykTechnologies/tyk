---
version: "3"

includes:
  test: .taskfiles/test.yml
  deps: .taskfiles/deps.yml
  lint: .taskfiles/lint.yml
  hooks: .taskfiles/hooks.yml
  opentelemetry:
    taskfile: ci/tests/tracing/Taskfile.yml
    dir: ci/tests/tracing/
  services:
    taskfile: docker/services/Taskfile.yml
    dir: docker/services/
  coprocess:
    taskfile: coprocess/Taskfile.yml
    dir: coprocess/
  config:
    taskfile: config/Taskfile.yml
    dir: config/
  apidef-oas:
    taskfile: apidef/oas/Taskfile.yml
    dir: apidef/oas/

vars:
  path: ./...

tasks:
  build:
    desc: "Build tyk gateway"
    cmds:
      - go build .
      - cd gateway && go test -c . && cd ..

  docker:
    desc: "build Tyk gateway internal/tyk-gateway"
    cmds:
      - docker build --build-arg GO_VERSION="$(go mod edit -json | jq .Go -r)" --platform "linux/amd64" --rm -t internal/tyk-gateway .
    sources:
      - go.mod
      - go.sum
      - "./**/*.go"

  test:plugin-compiler:
    desc: "Plugin compiler local build/test"
    cmds:
      - docker build --build-arg GO_VERSION=1.22 --build-arg BASE_IMAGE=tykio/golang-cross:1.22-bullseye --build-arg GITHUB_TAG=v5.1.0-alpha18 --build-arg GITHUB_SHA=$(git rev-parse HEAD) --platform=linux/amd64 --rm -t internal/plugin-compiler -f ci/images/plugin-compiler/Dockerfile .
      - docker run -it -e GOARCH=arm64 -e GOOS=linux --rm -v $(readlink -f .)/ci/images/plugin-compiler/data/basic-plugin:/plugin-source internal/plugin-compiler basic-plugin.so
      - docker run -it --rm -v $PWD:/go/src/github.com/TykTechnologies/tyk -w /go/src/github.com/TykTechnologies/tyk tykio/golang-cross:1.22-bullseye go build -trimpath -tags=goplugin .
      - ./tyk plugin load -f ./ci/images/plugin-compiler/data/basic-plugin/basic-plugin*.so -s MyPluginPre
      - docker rmi internal/plugin-compiler

  test:goreleaser:
    desc: "Test goreleaser locally"
    vars:
      pluginTemp: /tmp/plugin-compiler.extra_paths
    cmds:
      - go list ./... | perl -p -e 's/.+tyk\///g' | grep -v github | perl -p -e 's/\/.+//g' | sort | uniq > {{.pluginTemp}}
      - echo -e "go.mod\ngo.sum\nmain.go\nci/images/plugin-compiler" >> {{.pluginTemp}}
      - |
        set -x
        replacement=$(cat {{.pluginTemp}} | paste -sd , - | sed -e 's/,/","/g')
        yq -i ".dockers[4].extra_files |= [\"$replacement\"]" ci/goreleaser/goreleaser-5.0.yml
        yq -i ".dockers[0].extra_files |= [\"$replacement\"]" ci/goreleaser/goreleaser-el7.yml
        yq -i ".dockers[4].extra_files |= [\"$replacement\"]" ci/goreleaser/goreleaser.yml
      - echo goreleaser release --clean --snapshot -f ci/goreleaser/goreleaser.yml

  codegen:
    deps: [deps]
    desc: "Run code generation steps"
    cmds:
      - go generate ./...

  # Used in CI
  lint:
    desc: "Tidy the codebase"
    cmds:
      - task: codegen
      - task: lint:run
      - task: lint:extras

  lint:extras:
    desc: "Run more specific linters"
    cmds:
      - task: coprocess:lint
      - task: apidef-oas:lint

  # Used in CI by hooks, lint.
  fmt:
    desc: "Reformat import groups"
    cmds:
      - task: lint:fmt

  # This reformats imports with goimports-reviser;
  #
  # To limit reformatting scope to packages or files, set `path`:
  #
  # - `task fmt:imports path="./ctx ./rpc"`
  #
  # Current status: does not run in CI, triggers golangci-lint issues
  # in the files it fixed. They are preexisting but block golangci-lint
  # passing in CI.
  fmt:imports:
    desc: "Format imports"
    cmds:
      - goimports-reviser -imports-order std,general,company,project,blanked,dotted -company-prefixes github.com/TykTechnologies/ {{.path}}

  setup:
    desc: "Setup the project including dependencies and git hooks using lefthooks"
    cmds:
      - task: deps:default
      - lefthook install

  clean:
    desc: "Clean test files"
    cmds:
      - find -name '*.so' -delete -print
      - find -name '*.test' -delete -print

  generate-bento-config-validator-schema:
    desc: "Generate Bento Config Validator Schema"
    cmds:
      - go run apidef/streams/bento/schema/generate_bento_config_schema.go -o apidef/streams/bento/schema/bento-config-schema.json
