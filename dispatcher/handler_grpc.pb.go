// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: handler.proto

package dispatcher

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Handler_Login_FullMethodName                        = "/handler.Handler/Login"
	Handler_LoginWithGroup_FullMethodName               = "/handler.Handler/LoginWithGroup"
	Handler_GetKey_FullMethodName                       = "/handler.Handler/GetKey"
	Handler_SetKey_FullMethodName                       = "/handler.Handler/SetKey"
	Handler_GetExp_FullMethodName                       = "/handler.Handler/GetExp"
	Handler_GetKeys_FullMethodName                      = "/handler.Handler/GetKeys"
	Handler_DeleteKey_FullMethodName                    = "/handler.Handler/DeleteKey"
	Handler_DeleteRawKey_FullMethodName                 = "/handler.Handler/DeleteRawKey"
	Handler_GetKeysAndValues_FullMethodName             = "/handler.Handler/GetKeysAndValues"
	Handler_GetKeysAndValuesWithFilter_FullMethodName   = "/handler.Handler/GetKeysAndValuesWithFilter"
	Handler_DeleteKeys_FullMethodName                   = "/handler.Handler/DeleteKeys"
	Handler_Decrement_FullMethodName                    = "/handler.Handler/Decrement"
	Handler_IncrementWithExpire_FullMethodName          = "/handler.Handler/IncrementWithExpire"
	Handler_AppendToSet_FullMethodName                  = "/handler.Handler/AppendToSet"
	Handler_SetRollingWindow_FullMethodName             = "/handler.Handler/SetRollingWindow"
	Handler_GetApiDefinitions_FullMethodName            = "/handler.Handler/GetApiDefinitions"
	Handler_GetPolicies_FullMethodName                  = "/handler.Handler/GetPolicies"
	Handler_PurgeAnalyticsData_FullMethodName           = "/handler.Handler/PurgeAnalyticsData"
	Handler_PurgeAnalyticsDataAggregated_FullMethodName = "/handler.Handler/PurgeAnalyticsDataAggregated"
	Handler_CheckReload_FullMethodName                  = "/handler.Handler/CheckReload"
	Handler_GetKeySpaceUpdate_FullMethodName            = "/handler.Handler/GetKeySpaceUpdate"
	Handler_GetGroupKeySpaceUpdate_FullMethodName       = "/handler.Handler/GetGroupKeySpaceUpdate"
	Handler_Ping_FullMethodName                         = "/handler.Handler/Ping"
	Handler_Disconnect_FullMethodName                   = "/handler.Handler/Disconnect"
)

// HandlerClient is the client API for Handler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HandlerClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	LoginWithGroup(ctx context.Context, in *GroupLoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	GetKey(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*KeyResponse, error)
	SetKey(ctx context.Context, in *SetKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetExp(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*ExpResponse, error)
	GetKeys(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*KeysResponse, error)
	DeleteKey(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	DeleteRawKey(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	GetKeysAndValues(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*KeysValuesResponse, error)
	GetKeysAndValuesWithFilter(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*KeysValuesResponse, error)
	DeleteKeys(ctx context.Context, in *DeleteKeysRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	Decrement(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	IncrementWithExpire(ctx context.Context, in *IncrementRequest, opts ...grpc.CallOption) (*IncrementResponse, error)
	AppendToSet(ctx context.Context, in *AppendToSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetRollingWindow(ctx context.Context, in *SetRollingWindowRequest, opts ...grpc.CallOption) (*SetRollingWindowResponse, error)
	GetApiDefinitions(ctx context.Context, in *DefRequest, opts ...grpc.CallOption) (*ApiDefinitionsResponse, error)
	GetPolicies(ctx context.Context, in *OrgIdRequest, opts ...grpc.CallOption) (*PoliciesResponse, error)
	PurgeAnalyticsData(ctx context.Context, in *AnalyticsDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PurgeAnalyticsDataAggregated(ctx context.Context, in *AnalyticsDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckReload(ctx context.Context, in *OrgIdRequest, opts ...grpc.CallOption) (*ReloadResponse, error)
	GetKeySpaceUpdate(ctx context.Context, in *OrgIdRequest, opts ...grpc.CallOption) (*KeySpaceUpdateResponse, error)
	GetGroupKeySpaceUpdate(ctx context.Context, in *GroupKeySpaceRequest, opts ...grpc.CallOption) (*KeySpaceUpdateResponse, error)
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PingResponse, error)
	Disconnect(ctx context.Context, in *GroupLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type handlerClient struct {
	cc grpc.ClientConnInterface
}

func NewHandlerClient(cc grpc.ClientConnInterface) HandlerClient {
	return &handlerClient{cc}
}

func (c *handlerClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, Handler_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerClient) LoginWithGroup(ctx context.Context, in *GroupLoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, Handler_LoginWithGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerClient) GetKey(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*KeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KeyResponse)
	err := c.cc.Invoke(ctx, Handler_GetKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerClient) SetKey(ctx context.Context, in *SetKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Handler_SetKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerClient) GetExp(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*ExpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpResponse)
	err := c.cc.Invoke(ctx, Handler_GetExp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerClient) GetKeys(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*KeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KeysResponse)
	err := c.cc.Invoke(ctx, Handler_GetKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerClient) DeleteKey(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, Handler_DeleteKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerClient) DeleteRawKey(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, Handler_DeleteRawKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerClient) GetKeysAndValues(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*KeysValuesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KeysValuesResponse)
	err := c.cc.Invoke(ctx, Handler_GetKeysAndValues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerClient) GetKeysAndValuesWithFilter(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*KeysValuesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KeysValuesResponse)
	err := c.cc.Invoke(ctx, Handler_GetKeysAndValuesWithFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerClient) DeleteKeys(ctx context.Context, in *DeleteKeysRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, Handler_DeleteKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerClient) Decrement(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Handler_Decrement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerClient) IncrementWithExpire(ctx context.Context, in *IncrementRequest, opts ...grpc.CallOption) (*IncrementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncrementResponse)
	err := c.cc.Invoke(ctx, Handler_IncrementWithExpire_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerClient) AppendToSet(ctx context.Context, in *AppendToSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Handler_AppendToSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerClient) SetRollingWindow(ctx context.Context, in *SetRollingWindowRequest, opts ...grpc.CallOption) (*SetRollingWindowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRollingWindowResponse)
	err := c.cc.Invoke(ctx, Handler_SetRollingWindow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerClient) GetApiDefinitions(ctx context.Context, in *DefRequest, opts ...grpc.CallOption) (*ApiDefinitionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiDefinitionsResponse)
	err := c.cc.Invoke(ctx, Handler_GetApiDefinitions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerClient) GetPolicies(ctx context.Context, in *OrgIdRequest, opts ...grpc.CallOption) (*PoliciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PoliciesResponse)
	err := c.cc.Invoke(ctx, Handler_GetPolicies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerClient) PurgeAnalyticsData(ctx context.Context, in *AnalyticsDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Handler_PurgeAnalyticsData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerClient) PurgeAnalyticsDataAggregated(ctx context.Context, in *AnalyticsDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Handler_PurgeAnalyticsDataAggregated_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerClient) CheckReload(ctx context.Context, in *OrgIdRequest, opts ...grpc.CallOption) (*ReloadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReloadResponse)
	err := c.cc.Invoke(ctx, Handler_CheckReload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerClient) GetKeySpaceUpdate(ctx context.Context, in *OrgIdRequest, opts ...grpc.CallOption) (*KeySpaceUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KeySpaceUpdateResponse)
	err := c.cc.Invoke(ctx, Handler_GetKeySpaceUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerClient) GetGroupKeySpaceUpdate(ctx context.Context, in *GroupKeySpaceRequest, opts ...grpc.CallOption) (*KeySpaceUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KeySpaceUpdateResponse)
	err := c.cc.Invoke(ctx, Handler_GetGroupKeySpaceUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, Handler_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerClient) Disconnect(ctx context.Context, in *GroupLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Handler_Disconnect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HandlerServer is the server API for Handler service.
// All implementations must embed UnimplementedHandlerServer
// for forward compatibility.
type HandlerServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	LoginWithGroup(context.Context, *GroupLoginRequest) (*LoginResponse, error)
	GetKey(context.Context, *KeyRequest) (*KeyResponse, error)
	SetKey(context.Context, *SetKeyRequest) (*emptypb.Empty, error)
	GetExp(context.Context, *KeyRequest) (*ExpResponse, error)
	GetKeys(context.Context, *KeyRequest) (*KeysResponse, error)
	DeleteKey(context.Context, *KeyRequest) (*DeleteResponse, error)
	DeleteRawKey(context.Context, *KeyRequest) (*DeleteResponse, error)
	GetKeysAndValues(context.Context, *SearchRequest) (*KeysValuesResponse, error)
	GetKeysAndValuesWithFilter(context.Context, *SearchRequest) (*KeysValuesResponse, error)
	DeleteKeys(context.Context, *DeleteKeysRequest) (*DeleteResponse, error)
	Decrement(context.Context, *KeyRequest) (*emptypb.Empty, error)
	IncrementWithExpire(context.Context, *IncrementRequest) (*IncrementResponse, error)
	AppendToSet(context.Context, *AppendToSetRequest) (*emptypb.Empty, error)
	SetRollingWindow(context.Context, *SetRollingWindowRequest) (*SetRollingWindowResponse, error)
	GetApiDefinitions(context.Context, *DefRequest) (*ApiDefinitionsResponse, error)
	GetPolicies(context.Context, *OrgIdRequest) (*PoliciesResponse, error)
	PurgeAnalyticsData(context.Context, *AnalyticsDataRequest) (*emptypb.Empty, error)
	PurgeAnalyticsDataAggregated(context.Context, *AnalyticsDataRequest) (*emptypb.Empty, error)
	CheckReload(context.Context, *OrgIdRequest) (*ReloadResponse, error)
	GetKeySpaceUpdate(context.Context, *OrgIdRequest) (*KeySpaceUpdateResponse, error)
	GetGroupKeySpaceUpdate(context.Context, *GroupKeySpaceRequest) (*KeySpaceUpdateResponse, error)
	Ping(context.Context, *emptypb.Empty) (*PingResponse, error)
	Disconnect(context.Context, *GroupLoginRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedHandlerServer()
}

// UnimplementedHandlerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHandlerServer struct{}

func (UnimplementedHandlerServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedHandlerServer) LoginWithGroup(context.Context, *GroupLoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWithGroup not implemented")
}
func (UnimplementedHandlerServer) GetKey(context.Context, *KeyRequest) (*KeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKey not implemented")
}
func (UnimplementedHandlerServer) SetKey(context.Context, *SetKeyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetKey not implemented")
}
func (UnimplementedHandlerServer) GetExp(context.Context, *KeyRequest) (*ExpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExp not implemented")
}
func (UnimplementedHandlerServer) GetKeys(context.Context, *KeyRequest) (*KeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeys not implemented")
}
func (UnimplementedHandlerServer) DeleteKey(context.Context, *KeyRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKey not implemented")
}
func (UnimplementedHandlerServer) DeleteRawKey(context.Context, *KeyRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRawKey not implemented")
}
func (UnimplementedHandlerServer) GetKeysAndValues(context.Context, *SearchRequest) (*KeysValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeysAndValues not implemented")
}
func (UnimplementedHandlerServer) GetKeysAndValuesWithFilter(context.Context, *SearchRequest) (*KeysValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeysAndValuesWithFilter not implemented")
}
func (UnimplementedHandlerServer) DeleteKeys(context.Context, *DeleteKeysRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKeys not implemented")
}
func (UnimplementedHandlerServer) Decrement(context.Context, *KeyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decrement not implemented")
}
func (UnimplementedHandlerServer) IncrementWithExpire(context.Context, *IncrementRequest) (*IncrementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementWithExpire not implemented")
}
func (UnimplementedHandlerServer) AppendToSet(context.Context, *AppendToSetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendToSet not implemented")
}
func (UnimplementedHandlerServer) SetRollingWindow(context.Context, *SetRollingWindowRequest) (*SetRollingWindowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRollingWindow not implemented")
}
func (UnimplementedHandlerServer) GetApiDefinitions(context.Context, *DefRequest) (*ApiDefinitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiDefinitions not implemented")
}
func (UnimplementedHandlerServer) GetPolicies(context.Context, *OrgIdRequest) (*PoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicies not implemented")
}
func (UnimplementedHandlerServer) PurgeAnalyticsData(context.Context, *AnalyticsDataRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeAnalyticsData not implemented")
}
func (UnimplementedHandlerServer) PurgeAnalyticsDataAggregated(context.Context, *AnalyticsDataRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeAnalyticsDataAggregated not implemented")
}
func (UnimplementedHandlerServer) CheckReload(context.Context, *OrgIdRequest) (*ReloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckReload not implemented")
}
func (UnimplementedHandlerServer) GetKeySpaceUpdate(context.Context, *OrgIdRequest) (*KeySpaceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeySpaceUpdate not implemented")
}
func (UnimplementedHandlerServer) GetGroupKeySpaceUpdate(context.Context, *GroupKeySpaceRequest) (*KeySpaceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupKeySpaceUpdate not implemented")
}
func (UnimplementedHandlerServer) Ping(context.Context, *emptypb.Empty) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedHandlerServer) Disconnect(context.Context, *GroupLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (UnimplementedHandlerServer) mustEmbedUnimplementedHandlerServer() {}
func (UnimplementedHandlerServer) testEmbeddedByValue()                 {}

// UnsafeHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HandlerServer will
// result in compilation errors.
type UnsafeHandlerServer interface {
	mustEmbedUnimplementedHandlerServer()
}

func RegisterHandlerServer(s grpc.ServiceRegistrar, srv HandlerServer) {
	// If the following call pancis, it indicates UnimplementedHandlerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Handler_ServiceDesc, srv)
}

func _Handler_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Handler_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Handler_LoginWithGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).LoginWithGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Handler_LoginWithGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).LoginWithGroup(ctx, req.(*GroupLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Handler_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Handler_GetKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).GetKey(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Handler_SetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).SetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Handler_SetKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).SetKey(ctx, req.(*SetKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Handler_GetExp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).GetExp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Handler_GetExp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).GetExp(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Handler_GetKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).GetKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Handler_GetKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).GetKeys(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Handler_DeleteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).DeleteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Handler_DeleteKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).DeleteKey(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Handler_DeleteRawKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).DeleteRawKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Handler_DeleteRawKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).DeleteRawKey(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Handler_GetKeysAndValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).GetKeysAndValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Handler_GetKeysAndValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).GetKeysAndValues(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Handler_GetKeysAndValuesWithFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).GetKeysAndValuesWithFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Handler_GetKeysAndValuesWithFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).GetKeysAndValuesWithFilter(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Handler_DeleteKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).DeleteKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Handler_DeleteKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).DeleteKeys(ctx, req.(*DeleteKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Handler_Decrement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).Decrement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Handler_Decrement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).Decrement(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Handler_IncrementWithExpire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).IncrementWithExpire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Handler_IncrementWithExpire_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).IncrementWithExpire(ctx, req.(*IncrementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Handler_AppendToSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendToSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).AppendToSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Handler_AppendToSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).AppendToSet(ctx, req.(*AppendToSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Handler_SetRollingWindow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRollingWindowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).SetRollingWindow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Handler_SetRollingWindow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).SetRollingWindow(ctx, req.(*SetRollingWindowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Handler_GetApiDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).GetApiDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Handler_GetApiDefinitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).GetApiDefinitions(ctx, req.(*DefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Handler_GetPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).GetPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Handler_GetPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).GetPolicies(ctx, req.(*OrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Handler_PurgeAnalyticsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyticsDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).PurgeAnalyticsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Handler_PurgeAnalyticsData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).PurgeAnalyticsData(ctx, req.(*AnalyticsDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Handler_PurgeAnalyticsDataAggregated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyticsDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).PurgeAnalyticsDataAggregated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Handler_PurgeAnalyticsDataAggregated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).PurgeAnalyticsDataAggregated(ctx, req.(*AnalyticsDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Handler_CheckReload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).CheckReload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Handler_CheckReload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).CheckReload(ctx, req.(*OrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Handler_GetKeySpaceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).GetKeySpaceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Handler_GetKeySpaceUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).GetKeySpaceUpdate(ctx, req.(*OrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Handler_GetGroupKeySpaceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupKeySpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).GetGroupKeySpaceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Handler_GetGroupKeySpaceUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).GetGroupKeySpaceUpdate(ctx, req.(*GroupKeySpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Handler_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Handler_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Handler_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Handler_Disconnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).Disconnect(ctx, req.(*GroupLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Handler_ServiceDesc is the grpc.ServiceDesc for Handler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Handler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "handler.Handler",
	HandlerType: (*HandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Handler_Login_Handler,
		},
		{
			MethodName: "LoginWithGroup",
			Handler:    _Handler_LoginWithGroup_Handler,
		},
		{
			MethodName: "GetKey",
			Handler:    _Handler_GetKey_Handler,
		},
		{
			MethodName: "SetKey",
			Handler:    _Handler_SetKey_Handler,
		},
		{
			MethodName: "GetExp",
			Handler:    _Handler_GetExp_Handler,
		},
		{
			MethodName: "GetKeys",
			Handler:    _Handler_GetKeys_Handler,
		},
		{
			MethodName: "DeleteKey",
			Handler:    _Handler_DeleteKey_Handler,
		},
		{
			MethodName: "DeleteRawKey",
			Handler:    _Handler_DeleteRawKey_Handler,
		},
		{
			MethodName: "GetKeysAndValues",
			Handler:    _Handler_GetKeysAndValues_Handler,
		},
		{
			MethodName: "GetKeysAndValuesWithFilter",
			Handler:    _Handler_GetKeysAndValuesWithFilter_Handler,
		},
		{
			MethodName: "DeleteKeys",
			Handler:    _Handler_DeleteKeys_Handler,
		},
		{
			MethodName: "Decrement",
			Handler:    _Handler_Decrement_Handler,
		},
		{
			MethodName: "IncrementWithExpire",
			Handler:    _Handler_IncrementWithExpire_Handler,
		},
		{
			MethodName: "AppendToSet",
			Handler:    _Handler_AppendToSet_Handler,
		},
		{
			MethodName: "SetRollingWindow",
			Handler:    _Handler_SetRollingWindow_Handler,
		},
		{
			MethodName: "GetApiDefinitions",
			Handler:    _Handler_GetApiDefinitions_Handler,
		},
		{
			MethodName: "GetPolicies",
			Handler:    _Handler_GetPolicies_Handler,
		},
		{
			MethodName: "PurgeAnalyticsData",
			Handler:    _Handler_PurgeAnalyticsData_Handler,
		},
		{
			MethodName: "PurgeAnalyticsDataAggregated",
			Handler:    _Handler_PurgeAnalyticsDataAggregated_Handler,
		},
		{
			MethodName: "CheckReload",
			Handler:    _Handler_CheckReload_Handler,
		},
		{
			MethodName: "GetKeySpaceUpdate",
			Handler:    _Handler_GetKeySpaceUpdate_Handler,
		},
		{
			MethodName: "GetGroupKeySpaceUpdate",
			Handler:    _Handler_GetGroupKeySpaceUpdate_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Handler_Ping_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _Handler_Disconnect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "handler.proto",
}
