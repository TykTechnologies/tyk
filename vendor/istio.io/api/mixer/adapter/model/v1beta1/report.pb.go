// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mixer/adapter/model/v1beta1/report.proto

package v1beta1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Expresses the result of a report call.
type ReportResult struct {
}

func (m *ReportResult) Reset()      { *m = ReportResult{} }
func (*ReportResult) ProtoMessage() {}
func (*ReportResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc732328b315eb4, []int{0}
}
func (m *ReportResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportResult.Merge(m, src)
}
func (m *ReportResult) XXX_Size() int {
	return m.Size()
}
func (m *ReportResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportResult.DiscardUnknown(m)
}

var xxx_messageInfo_ReportResult proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ReportResult)(nil), "istio.mixer.adapter.model.v1beta1.ReportResult")
}

func init() {
	proto.RegisterFile("mixer/adapter/model/v1beta1/report.proto", fileDescriptor_abc732328b315eb4)
}

var fileDescriptor_abc732328b315eb4 = []byte{
	// 191 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0xce, 0xa1, 0x0e, 0xc2, 0x30,
	0x10, 0x80, 0xe1, 0xab, 0x41, 0x2c, 0x04, 0x41, 0x50, 0x88, 0x4b, 0x40, 0x4d, 0xb5, 0x59, 0x78,
	0x03, 0x1e, 0x61, 0x12, 0xd7, 0x65, 0xcd, 0xd2, 0x64, 0xcb, 0x35, 0x5d, 0x21, 0x48, 0x1e, 0x81,
	0xc7, 0xe0, 0x51, 0x26, 0x27, 0x27, 0x69, 0x67, 0x90, 0x7b, 0x04, 0x42, 0x37, 0x8d, 0x3b, 0xf1,
	0xdd, 0xdd, 0x9f, 0xa4, 0x8d, 0xbe, 0x2b, 0x2b, 0x64, 0x29, 0x8d, 0x53, 0x56, 0x34, 0x54, 0xaa,
	0x5a, 0xdc, 0xb2, 0x42, 0x39, 0x99, 0x09, 0xab, 0x0c, 0x59, 0xc7, 0x8d, 0x25, 0x47, 0xdb, 0x83,
	0x6e, 0x9d, 0x26, 0x1e, 0x3d, 0x5f, 0x3c, 0x8f, 0x9e, 0x2f, 0x7e, 0xbf, 0xab, 0xa8, 0xa2, 0xa8,
	0xc5, 0x6f, 0x9a, 0x17, 0x8f, 0x9b, 0x64, 0x9d, 0xc7, 0x43, 0xb9, 0x6a, 0xaf, 0xb5, 0x3b, 0x17,
	0x9d, 0x47, 0xe8, 0x3d, 0xc2, 0xe0, 0x11, 0x26, 0x8f, 0xf0, 0x08, 0xc8, 0x5e, 0x01, 0xa1, 0x0b,
	0xc8, 0xfa, 0x80, 0xec, 0x1d, 0x90, 0x7d, 0x02, 0xc2, 0x14, 0x90, 0x3d, 0x47, 0x84, 0x7e, 0x44,
	0x18, 0x46, 0x84, 0x4b, 0x3a, 0x27, 0x68, 0x12, 0xd2, 0x68, 0xf1, 0xa7, 0xbc, 0x58, 0xc5, 0xd7,
	0xa7, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x63, 0xe9, 0xbe, 0xdf, 0x00, 0x00, 0x00,
}

func (m *ReportResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintReport(dAtA []byte, offset int, v uint64) int {
	offset -= sovReport(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ReportResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovReport(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReport(x uint64) (n int) {
	return sovReport(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ReportResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReportResult{`,
		`}`,
	}, "")
	return s
}
func valueToStringReport(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ReportResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipReport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReport
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReport(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReport
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReport
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthReport
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowReport
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipReport(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthReport
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthReport = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReport   = fmt.Errorf("proto: integer overflow")
)
