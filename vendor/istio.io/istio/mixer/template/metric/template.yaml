# this config is created through command
# mixgen template -d $REPO_ROOT/mixer/template/metric/template_handler_service.descriptor_set -o $REPO_ROOT/mixer/template/metric/template.yaml -n metric
apiVersion: "config.istio.io/v1alpha2"
kind: template
metadata:
  name: metric
  namespace: istio-system
spec:
  descriptor: ""
---
