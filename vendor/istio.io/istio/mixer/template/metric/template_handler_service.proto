// Copyright 2017 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// THIS FILE IS AUTOMATICALLY GENERATED BY MIXGEN.

syntax = "proto3";


// The `metric` template is designed to let you describe runtime metric to dispatch to
// monitoring backends.
// 
// Example config:
// 
// ```yaml
// apiVersion: "config.istio.io/v1alpha2"
// kind: instance
// metadata:
//   name: requestsize
//   namespace: istio-system
// spec:
//   compiledTemplate: metric
//   params:
//     value: request.size | 0
//     dimensions:
//       source_version: source.labels["version"] | "unknown"
//       destination_service: destination.service.host | "unknown"
//       destination_version: destination.labels["version"] | "unknown"
//       response_code: response.code | 200
//     monitored_resource_type: '"UNSPECIFIED"'
// ```
//
// The `metric` template represents a single piece of data to report.
// 
// When writing the configuration, the value for the fields associated with this template can either be a
// literal or an [expression](https://istio.io/docs/reference//config/policy-and-telemetry/expression-language/). Please note that if the datatype of a field is not istio.policy.v1beta1.Value,
// then the expression's [inferred type](https://istio.io/docs/reference//config/policy-and-telemetry/expression-language/#type-checking) must match the datatype of the field.
package metric;


import "gogoproto/gogo.proto";
import "mixer/adapter/model/v1beta1/extensions.proto";
import "google/protobuf/any.proto";
import "mixer/adapter/model/v1beta1/report.proto";
import "policy/v1beta1/value_type.proto";
import "policy/v1beta1/type.proto";

option (istio.mixer.adapter.model.v1beta1.template_variety) = TEMPLATE_VARIETY_REPORT;
option (istio.mixer.adapter.model.v1beta1.template_name) = "metric";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.equal_all) = false;
option (gogoproto.gostring_all) = false;
option (gogoproto.stable_marshaler_all) = true;

// HandleMetricService is implemented by backends that wants to handle request-time 'metric' instances.
service HandleMetricService {
    // HandleMetric is called by Mixer at request-time to deliver 'metric' instances to the backend.
    rpc HandleMetric(HandleMetricRequest) returns (istio.mixer.adapter.model.v1beta1.ReportResult);
    
}

// Request message for HandleMetric method.
message HandleMetricRequest {

    // 'metric' instances.
    repeated InstanceMsg instances = 1;

    // Adapter specific handler configuration.
    //
    // Note: Backends can also implement [InfrastructureBackend][https://istio.io/docs/reference/config/mixer/istio.mixer.adapter.model.v1beta1.html#InfrastructureBackend]
    // service and therefore opt to receive handler configuration during session creation through [InfrastructureBackend.CreateSession][TODO: Link to this fragment]
    // call. In that case, adapter_config will have type_url as 'google.protobuf.Any.type_url' and would contain string
    // value of session_id (returned from InfrastructureBackend.CreateSession).
    google.protobuf.Any adapter_config = 2;

    // Id to dedupe identical requests from Mixer.
    string dedup_id = 3;
}





// Contains instance payload for 'metric' template. This is passed to infrastructure backends during request-time
// through HandleMetricService.HandleMetric.
message InstanceMsg {

    // Name of the instance as specified in configuration.
    string name = 72295727;
    
    // The value being reported.
    istio.policy.v1beta1.Value value = 1;
    
    // The unique identity of the particular metric to report.
    map<string, istio.policy.v1beta1.Value> dimensions = 2;
    
    // Optional. An expression to compute the type of the monitored resource this metric is being reported on.
// If the metric backend supports monitored resources, these fields are used to populate that resource. Otherwise
// these fields will be ignored by the adapter.
    string monitored_resource_type = 3;
    
    // Optional. A set of expressions that will form the dimensions of the monitored resource this metric is being reported on.
// If the metric backend supports monitored resources, these fields are used to populate that resource. Otherwise
// these fields will be ignored by the adapter.
    map<string, istio.policy.v1beta1.Value> monitored_resource_dimensions = 4;
    
}

// Contains inferred type information about specific instance of 'metric' template. This is passed to
// infrastructure backends during configuration-time through [InfrastructureBackend.CreateSession][TODO: Link to this fragment].
message Type {
    
    // The value being reported.
    istio.policy.v1beta1.ValueType value = 1;
    
    // The unique identity of the particular metric to report.
    map<string, istio.policy.v1beta1.ValueType> dimensions = 2;
    
    // Optional. A set of expressions that will form the dimensions of the monitored resource this metric is being reported on.
// If the metric backend supports monitored resources, these fields are used to populate that resource. Otherwise
// these fields will be ignored by the adapter.
    map<string, istio.policy.v1beta1.ValueType> monitored_resource_dimensions = 4;
    
}


// Represents instance configuration schema for 'metric' template.
message InstanceParam {
    
    // The value being reported.
    string value = 1;
    
    // The unique identity of the particular metric to report.
    map<string, string> dimensions = 2;
    
    // Optional. An expression to compute the type of the monitored resource this metric is being reported on.
// If the metric backend supports monitored resources, these fields are used to populate that resource. Otherwise
// these fields will be ignored by the adapter.
    string monitored_resource_type = 3;
    
    // Optional. A set of expressions that will form the dimensions of the monitored resource this metric is being reported on.
// If the metric backend supports monitored resources, these fields are used to populate that resource. Otherwise
// these fields will be ignored by the adapter.
    map<string, string> monitored_resource_dimensions = 4;
    
}

