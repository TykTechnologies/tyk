---
version: "3"

vars:
  root:
    sh: git rev-parse --show-toplevel
  branch_name: '{{.BRANCH_NAME | default "master"}}'

tasks:
  run:
    desc: "Run linters"
    cmds:
      - task: fmt
      - task: vet
      - task: check
      - golangci-lint run --new-from-rev=origin/{{ .branch_name }} --issues-exit-code=1 --fix ./...

  run-no-golangci:
    desc: "Run linters without golangci-lint auto-fix"
    cmds:
      - task: fmt
      - task: vet
      - task: check

  fmt:
    desc: "Run typical code cleanup steps"
    cmds:
      - go fmt ./...
      - go mod tidy

  vet:
    desc: "Run go vet"
    dir: '{{.root}}'
    cmds:
      - go vet ./...

  # this has manual use
  golangci-lint:
    desc: "Run golangci-lint for json summaries"
    cmds:
      - golangci-lint run --out-format json ./... | summary golangcilint > golangci-lint.json
      - golangci-lint run --out-format json --config .golangci.dev.yml ./... | summary golangcilint > golangci-lint-dev.json

  golangci-lint:fix:
    desc: "Run golangci-lint w fixing"
    cmds:
      - golangci-lint run --config .golangci.dev.yml --fix ./...

  golangci-lint:diff:
    desc: "Print changes from dev -> CI"
    cmds:
      - dyff between -i .golangci.dev.yml .golangci.yml

  build:
    desc: "Run go build for sanity check"
    dir: '{{.root}}'
    cmds:
      - go build .

  build-test:
    desc: "Compile go tests for sanity check"
    dir: '{{.root}}'
    cmds:
      - cd gateway && go test -c .

  check:
    desc: "Run repository specific checks"
    cmds:
      - task: check:x-tyk-gateway
      - task: check:imports
      - task: check:config

  check:imports:
    desc: "go-fsck lint import paths"
    dir: '{{.root}}'
    cmds:
      - go-fsck lint

  check:config:
    internal: true
    desc: "lint config schema"
    dir: '{{.root}}'
    cmds:
      - go test -count 1 ./cli/linter/...

  check:x-tyk-gateway:
    desc: "Lint x-tyk-gateway schema"
    dir: '{{.root}}'
    cmds:
      - go test -count 1 -run=TestXTykGateway_Lint ./apidef/oas/

  check-git-state:
    desc: "Check if git state is dirty"
    dir: '{{.root}}'
    vars:
      message: '{{.MESSAGE | default "task made git state dirty, please run task locally and update PR"}}'
    set: [errexit]
    cmds:
      - |
        git add --all
        git diff HEAD > git-state.log
        git_state_count=$(wc -l < git-state.log)
        if [[ $git_state_count -ne 0 ]]
        then
          echo "{{.message}}"
          echo
          cat git-state.log
          exit 1
        fi

