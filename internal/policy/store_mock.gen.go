// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/TykTechnologies/tyk/gateway (interfaces: RPCDataLoader)
//
// Generated by this command:
//
//	mockgen -typed -source= -destination=../internal/policy/store_mock.gen.go -package policy . RPCDataLoader
//

// Package policy is a generated GoMock package.
package policy

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRPCDataLoader is a mock of RPCDataLoader interface.
type MockRPCDataLoader struct {
	ctrl     *gomock.Controller
	recorder *MockRPCDataLoaderMockRecorder
}

// MockRPCDataLoaderMockRecorder is the mock recorder for MockRPCDataLoader.
type MockRPCDataLoaderMockRecorder struct {
	mock *MockRPCDataLoader
}

// NewMockRPCDataLoader creates a new mock instance.
func NewMockRPCDataLoader(ctrl *gomock.Controller) *MockRPCDataLoader {
	mock := &MockRPCDataLoader{ctrl: ctrl}
	mock.recorder = &MockRPCDataLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRPCDataLoader) EXPECT() *MockRPCDataLoaderMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockRPCDataLoader) Connect() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockRPCDataLoaderMockRecorder) Connect() *MockRPCDataLoaderConnectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockRPCDataLoader)(nil).Connect))
	return &MockRPCDataLoaderConnectCall{Call: call}
}

// MockRPCDataLoaderConnectCall wrap *gomock.Call
type MockRPCDataLoaderConnectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRPCDataLoaderConnectCall) Return(arg0 bool) *MockRPCDataLoaderConnectCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRPCDataLoaderConnectCall) Do(f func() bool) *MockRPCDataLoaderConnectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRPCDataLoaderConnectCall) DoAndReturn(f func() bool) *MockRPCDataLoaderConnectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApiDefinitions mocks base method.
func (m *MockRPCDataLoader) GetApiDefinitions(arg0 string, arg1 []string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiDefinitions", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetApiDefinitions indicates an expected call of GetApiDefinitions.
func (mr *MockRPCDataLoaderMockRecorder) GetApiDefinitions(arg0, arg1 any) *MockRPCDataLoaderGetApiDefinitionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiDefinitions", reflect.TypeOf((*MockRPCDataLoader)(nil).GetApiDefinitions), arg0, arg1)
	return &MockRPCDataLoaderGetApiDefinitionsCall{Call: call}
}

// MockRPCDataLoaderGetApiDefinitionsCall wrap *gomock.Call
type MockRPCDataLoaderGetApiDefinitionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRPCDataLoaderGetApiDefinitionsCall) Return(arg0 string) *MockRPCDataLoaderGetApiDefinitionsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRPCDataLoaderGetApiDefinitionsCall) Do(f func(string, []string) string) *MockRPCDataLoaderGetApiDefinitionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRPCDataLoaderGetApiDefinitionsCall) DoAndReturn(f func(string, []string) string) *MockRPCDataLoaderGetApiDefinitionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPolicies mocks base method.
func (m *MockRPCDataLoader) GetPolicies(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicies", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPolicies indicates an expected call of GetPolicies.
func (mr *MockRPCDataLoaderMockRecorder) GetPolicies(arg0 any) *MockRPCDataLoaderGetPoliciesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicies", reflect.TypeOf((*MockRPCDataLoader)(nil).GetPolicies), arg0)
	return &MockRPCDataLoaderGetPoliciesCall{Call: call}
}

// MockRPCDataLoaderGetPoliciesCall wrap *gomock.Call
type MockRPCDataLoaderGetPoliciesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRPCDataLoaderGetPoliciesCall) Return(arg0 string) *MockRPCDataLoaderGetPoliciesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRPCDataLoaderGetPoliciesCall) Do(f func(string) string) *MockRPCDataLoaderGetPoliciesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRPCDataLoaderGetPoliciesCall) DoAndReturn(f func(string) string) *MockRPCDataLoaderGetPoliciesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
