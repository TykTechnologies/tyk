// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/TykTechnologies/tyk/internal/certcheck (interfaces: CooldownCache)
//
// Generated by this command:
//
//	mockgen -destination=./cache_mock.go -package certcheck . CooldownCache
//

// Package certcheck is a generated GoMock package.
package certcheck

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCooldownCache is a mock of CooldownCache interface.
type MockCooldownCache struct {
	ctrl     *gomock.Controller
	recorder *MockCooldownCacheMockRecorder
}

// MockCooldownCacheMockRecorder is the mock recorder for MockCooldownCache.
type MockCooldownCacheMockRecorder struct {
	mock *MockCooldownCache
}

// NewMockCooldownCache creates a new mock instance.
func NewMockCooldownCache(ctrl *gomock.Controller) *MockCooldownCache {
	mock := &MockCooldownCache{ctrl: ctrl}
	mock.recorder = &MockCooldownCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCooldownCache) EXPECT() *MockCooldownCacheMockRecorder {
	return m.recorder
}

// HasCheckCooldown mocks base method.
func (m *MockCooldownCache) HasCheckCooldown(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasCheckCooldown", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasCheckCooldown indicates an expected call of HasCheckCooldown.
func (mr *MockCooldownCacheMockRecorder) HasCheckCooldown(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasCheckCooldown", reflect.TypeOf((*MockCooldownCache)(nil).HasCheckCooldown), arg0)
}

// HasFireEventCooldown mocks base method.
func (m *MockCooldownCache) HasFireEventCooldown(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasFireEventCooldown", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasFireEventCooldown indicates an expected call of HasFireEventCooldown.
func (mr *MockCooldownCacheMockRecorder) HasFireEventCooldown(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasFireEventCooldown", reflect.TypeOf((*MockCooldownCache)(nil).HasFireEventCooldown), arg0)
}

// IsCheckCooldownActive mocks base method.
func (m *MockCooldownCache) IsCheckCooldownActive(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCheckCooldownActive", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCheckCooldownActive indicates an expected call of IsCheckCooldownActive.
func (mr *MockCooldownCacheMockRecorder) IsCheckCooldownActive(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCheckCooldownActive", reflect.TypeOf((*MockCooldownCache)(nil).IsCheckCooldownActive), arg0)
}

// IsFireEventCooldownActive mocks base method.
func (m *MockCooldownCache) IsFireEventCooldownActive(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFireEventCooldownActive", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFireEventCooldownActive indicates an expected call of IsFireEventCooldownActive.
func (mr *MockCooldownCacheMockRecorder) IsFireEventCooldownActive(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFireEventCooldownActive", reflect.TypeOf((*MockCooldownCache)(nil).IsFireEventCooldownActive), arg0)
}

// SetCheckCooldown mocks base method.
func (m *MockCooldownCache) SetCheckCooldown(arg0 string, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCheckCooldown", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCheckCooldown indicates an expected call of SetCheckCooldown.
func (mr *MockCooldownCacheMockRecorder) SetCheckCooldown(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCheckCooldown", reflect.TypeOf((*MockCooldownCache)(nil).SetCheckCooldown), arg0, arg1)
}

// SetFireEventCooldown mocks base method.
func (m *MockCooldownCache) SetFireEventCooldown(arg0 string, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFireEventCooldown", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFireEventCooldown indicates an expected call of SetFireEventCooldown.
func (mr *MockCooldownCacheMockRecorder) SetFireEventCooldown(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFireEventCooldown", reflect.TypeOf((*MockCooldownCache)(nil).SetFireEventCooldown), arg0, arg1)
}
