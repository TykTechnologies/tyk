// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/TykTechnologies/tyk/internal/certcheck (interfaces: Batcher,BackgroundBatcher)
//
// Generated by this command:
//
//	mockgen -destination=./batcher_mock.go -package certcheck . Batcher,BackgroundBatcher
//

// Package certcheck is a generated GoMock package.
package certcheck

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockBatcher is a mock of Batcher interface.
type MockBatcher struct {
	ctrl     *gomock.Controller
	recorder *MockBatcherMockRecorder
}

// MockBatcherMockRecorder is the mock recorder for MockBatcher.
type MockBatcherMockRecorder struct {
	mock *MockBatcher
}

// NewMockBatcher creates a new mock instance.
func NewMockBatcher(ctrl *gomock.Controller) *MockBatcher {
	mock := &MockBatcher{ctrl: ctrl}
	mock.recorder = &MockBatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatcher) EXPECT() *MockBatcherMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockBatcher) Add(arg0 CertInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockBatcherMockRecorder) Add(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockBatcher)(nil).Add), arg0)
}

// MockBackgroundBatcher is a mock of BackgroundBatcher interface.
type MockBackgroundBatcher struct {
	ctrl     *gomock.Controller
	recorder *MockBackgroundBatcherMockRecorder
}

// MockBackgroundBatcherMockRecorder is the mock recorder for MockBackgroundBatcher.
type MockBackgroundBatcherMockRecorder struct {
	mock *MockBackgroundBatcher
}

// NewMockBackgroundBatcher creates a new mock instance.
func NewMockBackgroundBatcher(ctrl *gomock.Controller) *MockBackgroundBatcher {
	mock := &MockBackgroundBatcher{ctrl: ctrl}
	mock.recorder = &MockBackgroundBatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackgroundBatcher) EXPECT() *MockBackgroundBatcherMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockBackgroundBatcher) Add(arg0 CertInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockBackgroundBatcherMockRecorder) Add(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockBackgroundBatcher)(nil).Add), arg0)
}

// RunInBackground mocks base method.
func (m *MockBackgroundBatcher) RunInBackground(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RunInBackground", arg0)
}

// RunInBackground indicates an expected call of RunInBackground.
func (mr *MockBackgroundBatcherMockRecorder) RunInBackground(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunInBackground", reflect.TypeOf((*MockBackgroundBatcher)(nil).RunInBackground), arg0)
}

// SetFlushInterval mocks base method.
func (m *MockBackgroundBatcher) SetFlushInterval(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFlushInterval", arg0)
}

// SetFlushInterval indicates an expected call of SetFlushInterval.
func (mr *MockBackgroundBatcherMockRecorder) SetFlushInterval(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFlushInterval", reflect.TypeOf((*MockBackgroundBatcher)(nil).SetFlushInterval), arg0)
}
