// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/TykTechnologies/tyk/internal/graphengine (interfaces: Engine,ComplexityChecker,GraphQLRequestProcessor,GranularAccessChecker,ReverseProxyPreHandler)
//
// Generated by this command:
//
//	mockgen -destination=./engine_mock_test.go -package=graphengine . Engine,ComplexityChecker,GraphQLRequestProcessor,GranularAccessChecker,ReverseProxyPreHandler
//

// Package graphengine is a generated GoMock package.
package graphengine

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEngine is a mock of Engine interface.
type MockEngine struct {
	ctrl     *gomock.Controller
	recorder *MockEngineMockRecorder
}

// MockEngineMockRecorder is the mock recorder for MockEngine.
type MockEngineMockRecorder struct {
	mock *MockEngine
}

// NewMockEngine creates a new mock instance.
func NewMockEngine(ctrl *gomock.Controller) *MockEngine {
	mock := &MockEngine{ctrl: ctrl}
	mock.recorder = &MockEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEngine) EXPECT() *MockEngineMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockEngine) Cancel() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cancel")
}

// Cancel indicates an expected call of Cancel.
func (mr *MockEngineMockRecorder) Cancel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockEngine)(nil).Cancel))
}

// HandleReverseProxy mocks base method.
func (m *MockEngine) HandleReverseProxy(arg0 ReverseProxyParams) (*http.Response, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleReverseProxy", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// HandleReverseProxy indicates an expected call of HandleReverseProxy.
func (mr *MockEngineMockRecorder) HandleReverseProxy(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleReverseProxy", reflect.TypeOf((*MockEngine)(nil).HandleReverseProxy), arg0)
}

// HasSchema mocks base method.
func (m *MockEngine) HasSchema() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSchema")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasSchema indicates an expected call of HasSchema.
func (mr *MockEngineMockRecorder) HasSchema() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSchema", reflect.TypeOf((*MockEngine)(nil).HasSchema))
}

// ProcessAndStoreGraphQLRequest mocks base method.
func (m *MockEngine) ProcessAndStoreGraphQLRequest(arg0 http.ResponseWriter, arg1 *http.Request) (error, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessAndStoreGraphQLRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// ProcessAndStoreGraphQLRequest indicates an expected call of ProcessAndStoreGraphQLRequest.
func (mr *MockEngineMockRecorder) ProcessAndStoreGraphQLRequest(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessAndStoreGraphQLRequest", reflect.TypeOf((*MockEngine)(nil).ProcessAndStoreGraphQLRequest), arg0, arg1)
}

// ProcessGraphQLComplexity mocks base method.
func (m *MockEngine) ProcessGraphQLComplexity(arg0 *http.Request, arg1 *ComplexityAccessDefinition) (error, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessGraphQLComplexity", arg0, arg1)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// ProcessGraphQLComplexity indicates an expected call of ProcessGraphQLComplexity.
func (mr *MockEngineMockRecorder) ProcessGraphQLComplexity(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessGraphQLComplexity", reflect.TypeOf((*MockEngine)(nil).ProcessGraphQLComplexity), arg0, arg1)
}

// ProcessGraphQLGranularAccess mocks base method.
func (m *MockEngine) ProcessGraphQLGranularAccess(arg0 http.ResponseWriter, arg1 *http.Request, arg2 *GranularAccessDefinition) (error, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessGraphQLGranularAccess", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// ProcessGraphQLGranularAccess indicates an expected call of ProcessGraphQLGranularAccess.
func (mr *MockEngineMockRecorder) ProcessGraphQLGranularAccess(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessGraphQLGranularAccess", reflect.TypeOf((*MockEngine)(nil).ProcessGraphQLGranularAccess), arg0, arg1, arg2)
}

// Version mocks base method.
func (m *MockEngine) Version() EngineVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(EngineVersion)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockEngineMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockEngine)(nil).Version))
}

// MockComplexityChecker is a mock of ComplexityChecker interface.
type MockComplexityChecker struct {
	ctrl     *gomock.Controller
	recorder *MockComplexityCheckerMockRecorder
}

// MockComplexityCheckerMockRecorder is the mock recorder for MockComplexityChecker.
type MockComplexityCheckerMockRecorder struct {
	mock *MockComplexityChecker
}

// NewMockComplexityChecker creates a new mock instance.
func NewMockComplexityChecker(ctrl *gomock.Controller) *MockComplexityChecker {
	mock := &MockComplexityChecker{ctrl: ctrl}
	mock.recorder = &MockComplexityCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComplexityChecker) EXPECT() *MockComplexityCheckerMockRecorder {
	return m.recorder
}

// DepthLimitExceeded mocks base method.
func (m *MockComplexityChecker) DepthLimitExceeded(arg0 *http.Request, arg1 *ComplexityAccessDefinition) ComplexityFailReason {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DepthLimitExceeded", arg0, arg1)
	ret0, _ := ret[0].(ComplexityFailReason)
	return ret0
}

// DepthLimitExceeded indicates an expected call of DepthLimitExceeded.
func (mr *MockComplexityCheckerMockRecorder) DepthLimitExceeded(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DepthLimitExceeded", reflect.TypeOf((*MockComplexityChecker)(nil).DepthLimitExceeded), arg0, arg1)
}

// MockGraphQLRequestProcessor is a mock of GraphQLRequestProcessor interface.
type MockGraphQLRequestProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLRequestProcessorMockRecorder
}

// MockGraphQLRequestProcessorMockRecorder is the mock recorder for MockGraphQLRequestProcessor.
type MockGraphQLRequestProcessorMockRecorder struct {
	mock *MockGraphQLRequestProcessor
}

// NewMockGraphQLRequestProcessor creates a new mock instance.
func NewMockGraphQLRequestProcessor(ctrl *gomock.Controller) *MockGraphQLRequestProcessor {
	mock := &MockGraphQLRequestProcessor{ctrl: ctrl}
	mock.recorder = &MockGraphQLRequestProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLRequestProcessor) EXPECT() *MockGraphQLRequestProcessorMockRecorder {
	return m.recorder
}

// ProcessRequest mocks base method.
func (m *MockGraphQLRequestProcessor) ProcessRequest(arg0 context.Context, arg1 http.ResponseWriter, arg2 *http.Request) (error, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// ProcessRequest indicates an expected call of ProcessRequest.
func (mr *MockGraphQLRequestProcessorMockRecorder) ProcessRequest(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessRequest", reflect.TypeOf((*MockGraphQLRequestProcessor)(nil).ProcessRequest), arg0, arg1, arg2)
}

// MockGranularAccessChecker is a mock of GranularAccessChecker interface.
type MockGranularAccessChecker struct {
	ctrl     *gomock.Controller
	recorder *MockGranularAccessCheckerMockRecorder
}

// MockGranularAccessCheckerMockRecorder is the mock recorder for MockGranularAccessChecker.
type MockGranularAccessCheckerMockRecorder struct {
	mock *MockGranularAccessChecker
}

// NewMockGranularAccessChecker creates a new mock instance.
func NewMockGranularAccessChecker(ctrl *gomock.Controller) *MockGranularAccessChecker {
	mock := &MockGranularAccessChecker{ctrl: ctrl}
	mock.recorder = &MockGranularAccessCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGranularAccessChecker) EXPECT() *MockGranularAccessCheckerMockRecorder {
	return m.recorder
}

// CheckGraphQLRequestFieldAllowance mocks base method.
func (m *MockGranularAccessChecker) CheckGraphQLRequestFieldAllowance(arg0 http.ResponseWriter, arg1 *http.Request, arg2 *GranularAccessDefinition) GraphQLGranularAccessResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckGraphQLRequestFieldAllowance", arg0, arg1, arg2)
	ret0, _ := ret[0].(GraphQLGranularAccessResult)
	return ret0
}

// CheckGraphQLRequestFieldAllowance indicates an expected call of CheckGraphQLRequestFieldAllowance.
func (mr *MockGranularAccessCheckerMockRecorder) CheckGraphQLRequestFieldAllowance(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckGraphQLRequestFieldAllowance", reflect.TypeOf((*MockGranularAccessChecker)(nil).CheckGraphQLRequestFieldAllowance), arg0, arg1, arg2)
}

// MockReverseProxyPreHandler is a mock of ReverseProxyPreHandler interface.
type MockReverseProxyPreHandler struct {
	ctrl     *gomock.Controller
	recorder *MockReverseProxyPreHandlerMockRecorder
}

// MockReverseProxyPreHandlerMockRecorder is the mock recorder for MockReverseProxyPreHandler.
type MockReverseProxyPreHandlerMockRecorder struct {
	mock *MockReverseProxyPreHandler
}

// NewMockReverseProxyPreHandler creates a new mock instance.
func NewMockReverseProxyPreHandler(ctrl *gomock.Controller) *MockReverseProxyPreHandler {
	mock := &MockReverseProxyPreHandler{ctrl: ctrl}
	mock.recorder = &MockReverseProxyPreHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReverseProxyPreHandler) EXPECT() *MockReverseProxyPreHandlerMockRecorder {
	return m.recorder
}

// PreHandle mocks base method.
func (m *MockReverseProxyPreHandler) PreHandle(arg0 ReverseProxyParams) (ReverseProxyType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreHandle", arg0)
	ret0, _ := ret[0].(ReverseProxyType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PreHandle indicates an expected call of PreHandle.
func (mr *MockReverseProxyPreHandlerMockRecorder) PreHandle(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreHandle", reflect.TypeOf((*MockReverseProxyPreHandler)(nil).PreHandle), arg0)
}
