// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v3.21.12
// source: coprocess_response_object.proto

package coprocess

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ResponseObject is used by response hooks. All fields are modifiable.
type ResponseObject struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// StatusCode is the HTTP status code received from the upstream.
	StatusCode int32 `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	// RawBody represents the raw bytes of HTTP response body.
	RawBody []byte `protobuf:"bytes,2,opt,name=raw_body,json=rawBody,proto3" json:"raw_body,omitempty"`
	// Body represents the HTTP response body. Excluded when the raw_body contains invalid UTF-8 characters.
	Body string `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	// Headers represents the headers received from upstream.
	Headers map[string]string `protobuf:"bytes,4,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// MultivalueHeaders is a list of headers. Useful when header has multiple values. See Header.
	MultivalueHeaders []*Header `protobuf:"bytes,5,rep,name=multivalue_headers,json=multivalueHeaders,proto3" json:"multivalue_headers,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ResponseObject) Reset() {
	*x = ResponseObject{}
	mi := &file_coprocess_response_object_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseObject) ProtoMessage() {}

func (x *ResponseObject) ProtoReflect() protoreflect.Message {
	mi := &file_coprocess_response_object_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseObject.ProtoReflect.Descriptor instead.
func (*ResponseObject) Descriptor() ([]byte, []int) {
	return file_coprocess_response_object_proto_rawDescGZIP(), []int{0}
}

func (x *ResponseObject) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *ResponseObject) GetRawBody() []byte {
	if x != nil {
		return x.RawBody
	}
	return nil
}

func (x *ResponseObject) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *ResponseObject) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *ResponseObject) GetMultivalueHeaders() []*Header {
	if x != nil {
		return x.MultivalueHeaders
	}
	return nil
}

// Header is a reponse header that contains multiple associated values.
type Header struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Key represents the name of the header.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Values is a list of values for a given header content.
	Values        []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Header) Reset() {
	*x = Header{}
	mi := &file_coprocess_response_object_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_coprocess_response_object_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_coprocess_response_object_proto_rawDescGZIP(), []int{1}
}

func (x *Header) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Header) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

var File_coprocess_response_object_proto protoreflect.FileDescriptor

const file_coprocess_response_object_proto_rawDesc = "" +
	"\n" +
	"\x1fcoprocess_response_object.proto\x12\tcoprocess\"\xa0\x02\n" +
	"\x0eResponseObject\x12\x1f\n" +
	"\vstatus_code\x18\x01 \x01(\x05R\n" +
	"statusCode\x12\x19\n" +
	"\braw_body\x18\x02 \x01(\fR\arawBody\x12\x12\n" +
	"\x04body\x18\x03 \x01(\tR\x04body\x12@\n" +
	"\aheaders\x18\x04 \x03(\v2&.coprocess.ResponseObject.HeadersEntryR\aheaders\x12@\n" +
	"\x12multivalue_headers\x18\x05 \x03(\v2\x11.coprocess.HeaderR\x11multivalueHeaders\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"2\n" +
	"\x06Header\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x16\n" +
	"\x06values\x18\x02 \x03(\tR\x06valuesB\fZ\n" +
	"/coprocessb\x06proto3"

var (
	file_coprocess_response_object_proto_rawDescOnce sync.Once
	file_coprocess_response_object_proto_rawDescData []byte
)

func file_coprocess_response_object_proto_rawDescGZIP() []byte {
	file_coprocess_response_object_proto_rawDescOnce.Do(func() {
		file_coprocess_response_object_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_coprocess_response_object_proto_rawDesc), len(file_coprocess_response_object_proto_rawDesc)))
	})
	return file_coprocess_response_object_proto_rawDescData
}

var file_coprocess_response_object_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_coprocess_response_object_proto_goTypes = []any{
	(*ResponseObject)(nil), // 0: coprocess.ResponseObject
	(*Header)(nil),         // 1: coprocess.Header
	nil,                    // 2: coprocess.ResponseObject.HeadersEntry
}
var file_coprocess_response_object_proto_depIdxs = []int32{
	2, // 0: coprocess.ResponseObject.headers:type_name -> coprocess.ResponseObject.HeadersEntry
	1, // 1: coprocess.ResponseObject.multivalue_headers:type_name -> coprocess.Header
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_coprocess_response_object_proto_init() }
func file_coprocess_response_object_proto_init() {
	if File_coprocess_response_object_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_coprocess_response_object_proto_rawDesc), len(file_coprocess_response_object_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_coprocess_response_object_proto_goTypes,
		DependencyIndexes: file_coprocess_response_object_proto_depIdxs,
		MessageInfos:      file_coprocess_response_object_proto_msgTypes,
	}.Build()
	File_coprocess_response_object_proto = out.File
	file_coprocess_response_object_proto_goTypes = nil
	file_coprocess_response_object_proto_depIdxs = nil
}
