// Code generated by protoc-gen-go. DO NOT EDIT.
// source: coprocess_object.proto

package coprocess

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Object struct {
	HookType             HookType           `protobuf:"varint,1,opt,name=hook_type,json=hookType,proto3,enum=coprocess.HookType" json:"hook_type,omitempty"`
	HookName             string             `protobuf:"bytes,2,opt,name=hook_name,json=hookName,proto3" json:"hook_name,omitempty"`
	Request              *MiniRequestObject `protobuf:"bytes,3,opt,name=request,proto3" json:"request,omitempty"`
	Session              *SessionState      `protobuf:"bytes,4,opt,name=session,proto3" json:"session,omitempty"`
	Metadata             map[string]string  `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Spec                 map[string]string  `protobuf:"bytes,6,rep,name=spec,proto3" json:"spec,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Response             *ResponseObject    `protobuf:"bytes,7,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Object) Reset()         { *m = Object{} }
func (m *Object) String() string { return proto.CompactTextString(m) }
func (*Object) ProtoMessage()    {}
func (*Object) Descriptor() ([]byte, []int) {
	return fileDescriptor_72698a2223f86099, []int{0}
}

func (m *Object) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Object.Unmarshal(m, b)
}
func (m *Object) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Object.Marshal(b, m, deterministic)
}
func (m *Object) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Object.Merge(m, src)
}
func (m *Object) XXX_Size() int {
	return xxx_messageInfo_Object.Size(m)
}
func (m *Object) XXX_DiscardUnknown() {
	xxx_messageInfo_Object.DiscardUnknown(m)
}

var xxx_messageInfo_Object proto.InternalMessageInfo

func (m *Object) GetHookType() HookType {
	if m != nil {
		return m.HookType
	}
	return HookType_Unknown
}

func (m *Object) GetHookName() string {
	if m != nil {
		return m.HookName
	}
	return ""
}

func (m *Object) GetRequest() *MiniRequestObject {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *Object) GetSession() *SessionState {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *Object) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Object) GetSpec() map[string]string {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Object) GetResponse() *ResponseObject {
	if m != nil {
		return m.Response
	}
	return nil
}

type Event struct {
	Payload              string   `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_72698a2223f86099, []int{1}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

type EventReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventReply) Reset()         { *m = EventReply{} }
func (m *EventReply) String() string { return proto.CompactTextString(m) }
func (*EventReply) ProtoMessage()    {}
func (*EventReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_72698a2223f86099, []int{2}
}

func (m *EventReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventReply.Unmarshal(m, b)
}
func (m *EventReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventReply.Marshal(b, m, deterministic)
}
func (m *EventReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventReply.Merge(m, src)
}
func (m *EventReply) XXX_Size() int {
	return xxx_messageInfo_EventReply.Size(m)
}
func (m *EventReply) XXX_DiscardUnknown() {
	xxx_messageInfo_EventReply.DiscardUnknown(m)
}

var xxx_messageInfo_EventReply proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Object)(nil), "coprocess.Object")
	proto.RegisterMapType((map[string]string)(nil), "coprocess.Object.MetadataEntry")
	proto.RegisterMapType((map[string]string)(nil), "coprocess.Object.SpecEntry")
	proto.RegisterType((*Event)(nil), "coprocess.Event")
	proto.RegisterType((*EventReply)(nil), "coprocess.EventReply")
}

func init() { proto.RegisterFile("coprocess_object.proto", fileDescriptor_72698a2223f86099) }

var fileDescriptor_72698a2223f86099 = []byte{
	// 412 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x4b, 0x6f, 0xd4, 0x30,
	0x10, 0x80, 0x9b, 0x6e, 0x77, 0x37, 0x99, 0x52, 0x54, 0xcc, 0xcb, 0xa4, 0xa0, 0x86, 0x70, 0xc9,
	0x29, 0x40, 0x10, 0x0f, 0xb5, 0x57, 0x2a, 0x71, 0x29, 0x48, 0x5e, 0xee, 0x91, 0x9b, 0x8e, 0xb4,
	0x61, 0x37, 0xb6, 0x89, 0xdd, 0x4a, 0x91, 0xf8, 0xab, 0xfc, 0x17, 0x54, 0xdb, 0xc9, 0x66, 0xd9,
	0x53, 0x6f, 0xf6, 0xcc, 0xf7, 0x79, 0x1e, 0x09, 0x3c, 0xab, 0xa4, 0x6a, 0x65, 0x85, 0x5a, 0x97,
	0xf2, 0xea, 0x17, 0x56, 0x26, 0x57, 0xad, 0x34, 0x92, 0x44, 0x43, 0x3c, 0x7e, 0xb3, 0x41, 0x9a,
	0x5a, 0xd4, 0x65, 0x8b, 0xbf, 0x6f, 0x50, 0x9b, 0x2d, 0x3e, 0x3e, 0xdd, 0x40, 0x2d, 0x6a, 0x25,
	0x85, 0xc6, 0x6d, 0xe0, 0xd5, 0x06, 0xd0, 0xa8, 0x75, 0x2d, 0x45, 0xa9, 0x0d, 0x37, 0xe8, 0xd3,
	0xa3, 0x3e, 0x2a, 0xd9, 0x34, 0x52, 0xb8, 0x78, 0xfa, 0x77, 0x02, 0xb3, 0x1f, 0xf6, 0x1d, 0xf2,
	0x0e, 0xa2, 0xa5, 0x94, 0xab, 0xd2, 0x74, 0x0a, 0x69, 0x90, 0x04, 0xd9, 0xc3, 0xe2, 0x71, 0x3e,
	0x68, 0xf9, 0x37, 0x29, 0x57, 0x3f, 0x3b, 0x85, 0x2c, 0x5c, 0xfa, 0x13, 0x39, 0xf1, 0x86, 0xe0,
	0x0d, 0xd2, 0xfd, 0x24, 0xc8, 0x22, 0x97, 0xfc, 0xce, 0x1b, 0x24, 0x9f, 0x60, 0xee, 0x27, 0xa1,
	0x93, 0x24, 0xc8, 0x0e, 0x8b, 0x97, 0xa3, 0xc7, 0x2e, 0x6b, 0x51, 0x33, 0x97, 0x75, 0xd5, 0x59,
	0x0f, 0x93, 0xf7, 0x30, 0xf7, 0x03, 0xd0, 0x03, 0xeb, 0x3d, 0x1f, 0x79, 0x0b, 0x97, 0x59, 0xdc,
	0x4d, 0xc6, 0x7a, 0x8e, 0x9c, 0x43, 0xd8, 0xa0, 0xe1, 0xd7, 0xdc, 0x70, 0x3a, 0x4d, 0x26, 0xd9,
	0x61, 0x71, 0x3a, 0x72, 0x5c, 0x81, 0xfc, 0xd2, 0x13, 0x17, 0xc2, 0xb4, 0x1d, 0x1b, 0x04, 0xf2,
	0x16, 0x0e, 0xb4, 0xc2, 0x8a, 0xce, 0xac, 0x78, 0xb2, 0x2b, 0x2e, 0x14, 0x56, 0x4e, 0xb2, 0x20,
	0xf9, 0x08, 0x61, 0xff, 0x09, 0xe8, 0xdc, 0x76, 0xf8, 0x62, 0x24, 0x31, 0x9f, 0xf2, 0x63, 0x0d,
	0x68, 0x7c, 0x0e, 0x47, 0x5b, 0x2d, 0x90, 0x63, 0x98, 0xac, 0xb0, 0xb3, 0x9b, 0x8e, 0xd8, 0xdd,
	0x91, 0x3c, 0x81, 0xe9, 0x2d, 0x5f, 0xdf, 0xf4, 0xbb, 0x74, 0x97, 0xb3, 0xfd, 0x2f, 0x41, 0xfc,
	0x19, 0xa2, 0xa1, 0x8d, 0xfb, 0x88, 0xe9, 0x6b, 0x98, 0x5e, 0xdc, 0xa2, 0x30, 0x84, 0xc2, 0x5c,
	0xf1, 0x6e, 0x2d, 0xf9, 0xb5, 0x17, 0xfb, 0x6b, 0xfa, 0x00, 0xc0, 0x22, 0x0c, 0xd5, 0xba, 0x2b,
	0xfe, 0x00, 0x7c, 0xad, 0xb5, 0xe2, 0xa6, 0x5a, 0x62, 0x4b, 0x0a, 0x08, 0xfb, 0x1b, 0x79, 0xb4,
	0xb3, 0x9a, 0x78, 0x37, 0x94, 0xee, 0x91, 0x33, 0x38, 0xea, 0x1d, 0x57, 0xfa, 0x78, 0x44, 0xd9,
	0x48, 0xfc, 0xf4, 0xff, 0x88, 0xad, 0x9d, 0xee, 0x5d, 0xcd, 0xec, 0x5f, 0xf9, 0xe1, 0x5f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x99, 0x33, 0xf3, 0x0f, 0x37, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DispatcherClient is the client API for Dispatcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DispatcherClient interface {
	Dispatch(ctx context.Context, in *Object, opts ...grpc.CallOption) (*Object, error)
	DispatchEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*EventReply, error)
}

type dispatcherClient struct {
	cc grpc.ClientConnInterface
}

func NewDispatcherClient(cc grpc.ClientConnInterface) DispatcherClient {
	return &dispatcherClient{cc}
}

func (c *dispatcherClient) Dispatch(ctx context.Context, in *Object, opts ...grpc.CallOption) (*Object, error) {
	out := new(Object)
	err := c.cc.Invoke(ctx, "/coprocess.Dispatcher/Dispatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispatcherClient) DispatchEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*EventReply, error) {
	out := new(EventReply)
	err := c.cc.Invoke(ctx, "/coprocess.Dispatcher/DispatchEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DispatcherServer is the server API for Dispatcher service.
type DispatcherServer interface {
	Dispatch(context.Context, *Object) (*Object, error)
	DispatchEvent(context.Context, *Event) (*EventReply, error)
}

// UnimplementedDispatcherServer can be embedded to have forward compatible implementations.
type UnimplementedDispatcherServer struct {
}

func (*UnimplementedDispatcherServer) Dispatch(ctx context.Context, req *Object) (*Object, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dispatch not implemented")
}
func (*UnimplementedDispatcherServer) DispatchEvent(ctx context.Context, req *Event) (*EventReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DispatchEvent not implemented")
}

func RegisterDispatcherServer(s *grpc.Server, srv DispatcherServer) {
	s.RegisterService(&_Dispatcher_serviceDesc, srv)
}

func _Dispatcher_Dispatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Object)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherServer).Dispatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coprocess.Dispatcher/Dispatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherServer).Dispatch(ctx, req.(*Object))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dispatcher_DispatchEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherServer).DispatchEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coprocess.Dispatcher/DispatchEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherServer).DispatchEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dispatcher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "coprocess.Dispatcher",
	HandlerType: (*DispatcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Dispatch",
			Handler:    _Dispatcher_Dispatch_Handler,
		},
		{
			MethodName: "DispatchEvent",
			Handler:    _Dispatcher_DispatchEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coprocess_object.proto",
}
