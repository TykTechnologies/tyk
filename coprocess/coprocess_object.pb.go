// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v3.21.12
// source: coprocess_object.proto

package coprocess

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Object wraps a MiniRequestObject and contains additional fields that are useful for users that implement
// their own request dispatchers, like the middleware hook type and name.
type Object struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// HookType is an enumeration that identifies the plugin hook type.
	HookType HookType `protobuf:"varint,1,opt,name=hook_type,json=hookType,proto3,enum=coprocess.HookType" json:"hook_type,omitempty"`
	// HookName is the plugin name.
	HookName string `protobuf:"bytes,2,opt,name=hook_name,json=hookName,proto3" json:"hook_name,omitempty"`
	// Request relates to the main request data structure used by rich plugins. It’s used for middleware calls
	// and contains important fields like headers, parameters, body and URL.
	Request *MiniRequestObject `protobuf:"bytes,3,opt,name=request,proto3" json:"request,omitempty"`
	// Session stores information about the current key/user that’s used for authentication.
	Session *SessionState `protobuf:"bytes,4,opt,name=session,proto3" json:"session,omitempty"`
	// Metadata is a dynamic filed that contains the metadata.
	Metadata map[string]string `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Spec contains information about API definition, including APIID, OrgID and config_data.
	Spec map[string]string `protobuf:"bytes,6,rep,name=spec,proto3" json:"spec,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Response relates to the ResponseObject used by response hooks. The fields are populated with the upstream HTTP
	// response data. All the field contents can be modified.
	Response *ResponseObject `protobuf:"bytes,7,opt,name=response,proto3" json:"response,omitempty"`
	// TraceID is the OpenTelemetry trace ID in hexadecimal format (32 characters).
	// Example: "1234567890abcdef1234567890abcdef"
	TraceId string `protobuf:"bytes,8,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	// SpanID is the OpenTelemetry span ID in hexadecimal format (16 characters).
	// Example: "1234567890abcdef"
	SpanId string `protobuf:"bytes,9,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	// TraceFlags represents the OpenTelemetry trace flags (8 bits stored as uint32).
	// Bit 0 (least significant) is the "sampled" flag (1 = sampled, 0 = not sampled).
	// Example: 1 (sampled), 0 (not sampled)
	TraceFlags    uint32 `protobuf:"varint,10,opt,name=trace_flags,json=traceFlags,proto3" json:"trace_flags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Object) Reset() {
	*x = Object{}
	mi := &file_coprocess_object_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Object) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Object) ProtoMessage() {}

func (x *Object) ProtoReflect() protoreflect.Message {
	mi := &file_coprocess_object_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Object.ProtoReflect.Descriptor instead.
func (*Object) Descriptor() ([]byte, []int) {
	return file_coprocess_object_proto_rawDescGZIP(), []int{0}
}

func (x *Object) GetHookType() HookType {
	if x != nil {
		return x.HookType
	}
	return HookType_Unknown
}

func (x *Object) GetHookName() string {
	if x != nil {
		return x.HookName
	}
	return ""
}

func (x *Object) GetRequest() *MiniRequestObject {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *Object) GetSession() *SessionState {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *Object) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Object) GetSpec() map[string]string {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Object) GetResponse() *ResponseObject {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *Object) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *Object) GetSpanId() string {
	if x != nil {
		return x.SpanId
	}
	return ""
}

func (x *Object) GetTraceFlags() uint32 {
	if x != nil {
		return x.TraceFlags
	}
	return 0
}

// Event is represented as a JSON payload.
type Event struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Payload represents the JSON payload.
	Payload       string `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_coprocess_object_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_coprocess_object_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_coprocess_object_proto_rawDescGZIP(), []int{1}
}

func (x *Event) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

// EventReply is the response for event.
type EventReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventReply) Reset() {
	*x = EventReply{}
	mi := &file_coprocess_object_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventReply) ProtoMessage() {}

func (x *EventReply) ProtoReflect() protoreflect.Message {
	mi := &file_coprocess_object_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventReply.ProtoReflect.Descriptor instead.
func (*EventReply) Descriptor() ([]byte, []int) {
	return file_coprocess_object_proto_rawDescGZIP(), []int{2}
}

var File_coprocess_object_proto protoreflect.FileDescriptor

const file_coprocess_object_proto_rawDesc = "" +
	"\n" +
	"\x16coprocess_object.proto\x12\tcoprocess\x1a#coprocess_mini_request_object.proto\x1a\x1fcoprocess_response_object.proto\x1a\x1dcoprocess_session_state.proto\x1a\x16coprocess_common.proto\"\xb2\x04\n" +
	"\x06Object\x120\n" +
	"\thook_type\x18\x01 \x01(\x0e2\x13.coprocess.HookTypeR\bhookType\x12\x1b\n" +
	"\thook_name\x18\x02 \x01(\tR\bhookName\x126\n" +
	"\arequest\x18\x03 \x01(\v2\x1c.coprocess.MiniRequestObjectR\arequest\x121\n" +
	"\asession\x18\x04 \x01(\v2\x17.coprocess.SessionStateR\asession\x12;\n" +
	"\bmetadata\x18\x05 \x03(\v2\x1f.coprocess.Object.MetadataEntryR\bmetadata\x12/\n" +
	"\x04spec\x18\x06 \x03(\v2\x1b.coprocess.Object.SpecEntryR\x04spec\x125\n" +
	"\bresponse\x18\a \x01(\v2\x19.coprocess.ResponseObjectR\bresponse\x12\x19\n" +
	"\btrace_id\x18\b \x01(\tR\atraceId\x12\x17\n" +
	"\aspan_id\x18\t \x01(\tR\x06spanId\x12\x1f\n" +
	"\vtrace_flags\x18\n" +
	" \x01(\rR\n" +
	"traceFlags\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a7\n" +
	"\tSpecEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"!\n" +
	"\x05Event\x12\x18\n" +
	"\apayload\x18\x01 \x01(\tR\apayload\"\f\n" +
	"\n" +
	"EventReply2|\n" +
	"\n" +
	"Dispatcher\x122\n" +
	"\bDispatch\x12\x11.coprocess.Object\x1a\x11.coprocess.Object\"\x00\x12:\n" +
	"\rDispatchEvent\x12\x10.coprocess.Event\x1a\x15.coprocess.EventReply\"\x00B\fZ\n" +
	"/coprocessb\x06proto3"

var (
	file_coprocess_object_proto_rawDescOnce sync.Once
	file_coprocess_object_proto_rawDescData []byte
)

func file_coprocess_object_proto_rawDescGZIP() []byte {
	file_coprocess_object_proto_rawDescOnce.Do(func() {
		file_coprocess_object_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_coprocess_object_proto_rawDesc), len(file_coprocess_object_proto_rawDesc)))
	})
	return file_coprocess_object_proto_rawDescData
}

var file_coprocess_object_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_coprocess_object_proto_goTypes = []any{
	(*Object)(nil),            // 0: coprocess.Object
	(*Event)(nil),             // 1: coprocess.Event
	(*EventReply)(nil),        // 2: coprocess.EventReply
	nil,                       // 3: coprocess.Object.MetadataEntry
	nil,                       // 4: coprocess.Object.SpecEntry
	(HookType)(0),             // 5: coprocess.HookType
	(*MiniRequestObject)(nil), // 6: coprocess.MiniRequestObject
	(*SessionState)(nil),      // 7: coprocess.SessionState
	(*ResponseObject)(nil),    // 8: coprocess.ResponseObject
}
var file_coprocess_object_proto_depIdxs = []int32{
	5, // 0: coprocess.Object.hook_type:type_name -> coprocess.HookType
	6, // 1: coprocess.Object.request:type_name -> coprocess.MiniRequestObject
	7, // 2: coprocess.Object.session:type_name -> coprocess.SessionState
	3, // 3: coprocess.Object.metadata:type_name -> coprocess.Object.MetadataEntry
	4, // 4: coprocess.Object.spec:type_name -> coprocess.Object.SpecEntry
	8, // 5: coprocess.Object.response:type_name -> coprocess.ResponseObject
	0, // 6: coprocess.Dispatcher.Dispatch:input_type -> coprocess.Object
	1, // 7: coprocess.Dispatcher.DispatchEvent:input_type -> coprocess.Event
	0, // 8: coprocess.Dispatcher.Dispatch:output_type -> coprocess.Object
	2, // 9: coprocess.Dispatcher.DispatchEvent:output_type -> coprocess.EventReply
	8, // [8:10] is the sub-list for method output_type
	6, // [6:8] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_coprocess_object_proto_init() }
func file_coprocess_object_proto_init() {
	if File_coprocess_object_proto != nil {
		return
	}
	file_coprocess_mini_request_object_proto_init()
	file_coprocess_response_object_proto_init()
	file_coprocess_session_state_proto_init()
	file_coprocess_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_coprocess_object_proto_rawDesc), len(file_coprocess_object_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_coprocess_object_proto_goTypes,
		DependencyIndexes: file_coprocess_object_proto_depIdxs,
		MessageInfos:      file_coprocess_object_proto_msgTypes,
	}.Build()
	File_coprocess_object_proto = out.File
	file_coprocess_object_proto_goTypes = nil
	file_coprocess_object_proto_depIdxs = nil
}
