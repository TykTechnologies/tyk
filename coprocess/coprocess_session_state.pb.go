// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v3.21.12
// source: coprocess_session_state.proto

package coprocess

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AccessSpec defines an API's URL (endpoint) and associated list of allowed methods.
type AccessSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Url is a URL (endpoint) belonging to the API associated with the request session.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Methods is a list of allowed methods for the URL (endpoint), e.g. 'methods': [ 'GET'. 'POST', 'PUT', 'PATCH' ]
	// The list of methods are case sensitive.
	Methods       []string `protobuf:"bytes,2,rep,name=methods,proto3" json:"methods,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessSpec) Reset() {
	*x = AccessSpec{}
	mi := &file_coprocess_session_state_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessSpec) ProtoMessage() {}

func (x *AccessSpec) ProtoReflect() protoreflect.Message {
	mi := &file_coprocess_session_state_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessSpec.ProtoReflect.Descriptor instead.
func (*AccessSpec) Descriptor() ([]byte, []int) {
	return file_coprocess_session_state_proto_rawDescGZIP(), []int{0}
}

func (x *AccessSpec) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AccessSpec) GetMethods() []string {
	if x != nil {
		return x.Methods
	}
	return nil
}

// AccessDefinition is defined as an attribute within a SessionState instance.
// Contains the allowed versions and URLs (endpoints) for the API that the session request relates to.
// Each URL (endpoint) specifies an associated list of allowed methods. See also AccessSpec.
type AccessDefinition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ApiName is the name of the API that the session request relates to.
	ApiName string `protobuf:"bytes,1,opt,name=api_name,json=apiName,proto3" json:"api_name,omitempty"`
	// ApiId is the ID of the API that the session request relates to.
	ApiId string `protobuf:"bytes,2,opt,name=api_id,json=apiId,proto3" json:"api_id,omitempty"`
	// Versions is a list of allowed API versions, e.g.  `"versions": [ "Default" ]`.
	Versions []string `protobuf:"bytes,3,rep,name=versions,proto3" json:"versions,omitempty"`
	// AllowedUrls is a list of AccessSpec instances. Each instance defines a URL (endpoint)
	// with an associated allowed list of methods. If all URLs (endpoints) are allowed then the
	// attribute is not set.
	AllowedUrls   []*AccessSpec `protobuf:"bytes,4,rep,name=allowed_urls,json=allowedUrls,proto3" json:"allowed_urls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessDefinition) Reset() {
	*x = AccessDefinition{}
	mi := &file_coprocess_session_state_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessDefinition) ProtoMessage() {}

func (x *AccessDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_coprocess_session_state_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessDefinition.ProtoReflect.Descriptor instead.
func (*AccessDefinition) Descriptor() ([]byte, []int) {
	return file_coprocess_session_state_proto_rawDescGZIP(), []int{1}
}

func (x *AccessDefinition) GetApiName() string {
	if x != nil {
		return x.ApiName
	}
	return ""
}

func (x *AccessDefinition) GetApiId() string {
	if x != nil {
		return x.ApiId
	}
	return ""
}

func (x *AccessDefinition) GetVersions() []string {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *AccessDefinition) GetAllowedUrls() []*AccessSpec {
	if x != nil {
		return x.AllowedUrls
	}
	return nil
}

// BasicAuthData contains a hashed password and the name of the hashing algorithm used.
type BasicAuthData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Password is a hashed password.
	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	// Hash is the name of the hashing algorithm used to hash the password, e.g. bcrypt, Argon2.
	Hash          string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BasicAuthData) Reset() {
	*x = BasicAuthData{}
	mi := &file_coprocess_session_state_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BasicAuthData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicAuthData) ProtoMessage() {}

func (x *BasicAuthData) ProtoReflect() protoreflect.Message {
	mi := &file_coprocess_session_state_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicAuthData.ProtoReflect.Descriptor instead.
func (*BasicAuthData) Descriptor() ([]byte, []int) {
	return file_coprocess_session_state_proto_rawDescGZIP(), []int{2}
}

func (x *BasicAuthData) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *BasicAuthData) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

// JWTData is added to sessions where a Tyk key (embedding a shared secret) is used as the public key for
// signing the JWT. This message contains the shared secret.
type JWTData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Secret is the shared secret.
	Secret        string `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JWTData) Reset() {
	*x = JWTData{}
	mi := &file_coprocess_session_state_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JWTData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTData) ProtoMessage() {}

func (x *JWTData) ProtoReflect() protoreflect.Message {
	mi := &file_coprocess_session_state_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTData.ProtoReflect.Descriptor instead.
func (*JWTData) Descriptor() ([]byte, []int) {
	return file_coprocess_session_state_proto_rawDescGZIP(), []int{3}
}

func (x *JWTData) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

// Monitor allows API endpoint users, stakeholders or an organisation to be notified by webhook when
// certain quota limits have been reached for their session token.
type Monitor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TriggerLimits is a list of quota percentage limits, defined in descending order.
	TriggerLimits []float64 `protobuf:"fixed64,1,rep,packed,name=trigger_limits,json=triggerLimits,proto3" json:"trigger_limits,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Monitor) Reset() {
	*x = Monitor{}
	mi := &file_coprocess_session_state_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Monitor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Monitor) ProtoMessage() {}

func (x *Monitor) ProtoReflect() protoreflect.Message {
	mi := &file_coprocess_session_state_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Monitor.ProtoReflect.Descriptor instead.
func (*Monitor) Descriptor() ([]byte, []int) {
	return file_coprocess_session_state_proto_rawDescGZIP(), []int{4}
}

func (x *Monitor) GetTriggerLimits() []float64 {
	if x != nil {
		return x.TriggerLimits
	}
	return nil
}

// SessionState is created for every authenticated request and stored in Redis.
// Used to track the activity of a given key in different ways, mainly by the built-in
// Tyk middleware such as the quota middleware or the rate limiter. A GRPC plugin is
// able to create a SessionState object and store it in the same way built-in
// authentication mechanisms do.
type SessionState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// LastCheck is deprecated.
	LastCheck int64 `protobuf:"varint,1,opt,name=last_check,json=lastCheck,proto3" json:"last_check,omitempty"`
	// Allowance is deprecated, replaced by rate.
	Allowance float64 `protobuf:"fixed64,2,opt,name=allowance,proto3" json:"allowance,omitempty"`
	// Rate is the number of requests that are allowed in the specified rate limiting window.
	Rate float64 `protobuf:"fixed64,3,opt,name=rate,proto3" json:"rate,omitempty"`
	// Per is the duration of the rate window, in seconds.
	Per float64 `protobuf:"fixed64,4,opt,name=per,proto3" json:"per,omitempty"`
	// Expires is an epoch that defines when the key should expire.
	Expires int64 `protobuf:"varint,5,opt,name=expires,proto3" json:"expires,omitempty"`
	// QuotaMax is the maximum number of requests allowed during the quota period.
	QuotaMax int64 `protobuf:"varint,6,opt,name=quota_max,json=quotaMax,proto3" json:"quota_max,omitempty"`
	// QuotaRenews is an epoch that defines when the quota renews.
	QuotaRenews int64 `protobuf:"varint,7,opt,name=quota_renews,json=quotaRenews,proto3" json:"quota_renews,omitempty"`
	// QuotaRemaining is the number of requests remaining for this user’s quota (unrelated to rate
	// limit).
	QuotaRemaining int64 `protobuf:"varint,8,opt,name=quota_remaining,json=quotaRemaining,proto3" json:"quota_remaining,omitempty"`
	// QuotaRenewalRate is the time in seconds during which the quota is valid.
	// So for 1000 requests per hour, this value would be 3600 while quota_max and
	// quota_remaining would be 1000.
	QuotaRenewalRate int64 `protobuf:"varint,9,opt,name=quota_renewal_rate,json=quotaRenewalRate,proto3" json:"quota_renewal_rate,omitempty"`
	// AccessRights maps the session's API ID to an AccessDefinition. The AccessDefinition defines the access rights for the API in terms
	// of allowed: versions and URLs(endpoints). Each URL (endpoint) has a list of allowed methods.
	AccessRights map[string]*AccessDefinition `protobuf:"bytes,10,rep,name=access_rights,json=accessRights,proto3" json:"access_rights,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// OrgId represents the organisation the session user belongs to. This can be used in conjunction with the org_id
	// setting in the API Definition object to have tokens owned by organisations.
	OrgId string `protobuf:"bytes,11,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// OauthClientId is the OAuth client ID that is set if the token is generated by an OAuth client during an
	// OAuth authorisation flow.
	OauthClientId string `protobuf:"bytes,12,opt,name=oauth_client_id,json=oauthClientId,proto3" json:"oauth_client_id,omitempty"`
	// OauthKeys maps an OAuth client ID with a corresponding access token value. Currently unsupported and under development.
	OauthKeys map[string]string `protobuf:"bytes,13,rep,name=oauth_keys,json=oauthKeys,proto3" json:"oauth_keys,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// BasicAuthData contains a hashed password and the name of the hashing algorithm used.
	BasicAuthData *BasicAuthData `protobuf:"bytes,14,opt,name=basic_auth_data,json=basicAuthData,proto3" json:"basic_auth_data,omitempty"`
	// JwtData is added to sessions where a Tyk key (embedding a shared secret) is used as the public key
	// for signing the JWT. The JWT token's KID header value references the ID of a Tyk key.
	JwtData *JWTData `protobuf:"bytes,15,opt,name=jwt_data,json=jwtData,proto3" json:"jwt_data,omitempty"`
	// HmacEnabled is set to `true` to indicate generation of a HMAC signature using the secret provided in `hmac_secret`.
	// If the generated signature matches the signature provided in the Authorizaton header then authentication of
	// the request has passed.
	HmacEnabled bool `protobuf:"varint,16,opt,name=hmac_enabled,json=hmacEnabled,proto3" json:"hmac_enabled,omitempty"`
	// HmacSecret represents the HMAC secret.
	HmacSecret string `protobuf:"bytes,17,opt,name=hmac_secret,json=hmacSecret,proto3" json:"hmac_secret,omitempty"`
	// IsInactive when set to true, indicates that access is denied.
	IsInactive bool `protobuf:"varint,18,opt,name=is_inactive,json=isInactive,proto3" json:"is_inactive,omitempty"`
	// ApplyPolicyId represents the policy ID that is bound to the token. Deprecated use apply_policies instead.
	ApplyPolicyId string `protobuf:"bytes,19,opt,name=apply_policy_id,json=applyPolicyId,proto3" json:"apply_policy_id,omitempty"`
	// DataExpires is a value, in seconds, that defines when data generated by the session token expires in
	// the analytics DB (must be using Pro edition and MongoDB).
	DataExpires int64 `protobuf:"varint,20,opt,name=data_expires,json=dataExpires,proto3" json:"data_expires,omitempty"`
	// Monitor represents the quota monitor settings, currently unsupported in gRPC sessions.
	Monitor *Monitor `protobuf:"bytes,21,opt,name=monitor,proto3" json:"monitor,omitempty"`
	// EnableDetailedRecording should be set to true to have Tyk store the inbound request and outbound
	// response data in HTTP Wire format as part of the analytics data.
	EnableDetailedRecording bool `protobuf:"varint,22,opt,name=enable_detailed_recording,json=enableDetailedRecording,proto3" json:"enable_detailed_recording,omitempty"`
	// Metadata represents meta-data to be included as part of the session that can be used in other
	// middleware such as transforms and header injection to embed user-specific
	// data into a request, or alternatively to query the providence of a key.
	Metadata map[string]string `protobuf:"bytes,23,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Tags is a list of tags to embed into analytics data when the request completes. If a policy
	// has tags, those tags take precedence and are used instead.
	Tags []string `protobuf:"bytes,24,rep,name=tags,proto3" json:"tags,omitempty"`
	// Alias is an identifier for the token for use in analytics, to allow easier tracing of hashed
	// and unhashed tokens.
	Alias string `protobuf:"bytes,25,opt,name=alias,proto3" json:"alias,omitempty"`
	// LastUpdated is a timestamp that represents the time the session was last updated.
	// With *PostAuth* hooks this is a UNIX timestamp.
	LastUpdated string `protobuf:"bytes,26,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	// IdExtractorDeadline is a UNIX timestamp that signifies when a cached key or ID will expire.
	// This relates to custom authentication, where authenticated keys can be cached to save repeated requests
	// to the gRPC server.
	IdExtractorDeadline int64 `protobuf:"varint,27,opt,name=id_extractor_deadline,json=idExtractorDeadline,proto3" json:"id_extractor_deadline,omitempty"`
	// SessionLifetime is a UNIX timestamp that denotes when the key will automatically expire.
	// Any·subsequent API request made using the key will be rejected.
	// Overrides the global session lifetime.
	SessionLifetime int64 `protobuf:"varint,28,opt,name=session_lifetime,json=sessionLifetime,proto3" json:"session_lifetime,omitempty"`
	// ApplyPolicies is a list of IDs for the policies that are bound to the token.
	ApplyPolicies []string `protobuf:"bytes,29,rep,name=apply_policies,json=applyPolicies,proto3" json:"apply_policies,omitempty"`
	// Certificate is the client certificate used to authenticate the request. Exists in the session instance if mTLS is configured
	// for the API. Currently unsupported.
	Certificate string `protobuf:"bytes,30,opt,name=certificate,proto3" json:"certificate,omitempty"`
	// MaxQueryDepth relates to graphQL APIs. If the session key has a maximum query depth limit defined then it is included in the
	// session instance. Currently unsupported and under development.
	MaxQueryDepth int64 `protobuf:"varint,31,opt,name=max_query_depth,json=maxQueryDepth,proto3" json:"max_query_depth,omitempty"`
	// KeyId corresponds to the token used for API access.
	KeyId         string `protobuf:"bytes,32,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionState) Reset() {
	*x = SessionState{}
	mi := &file_coprocess_session_state_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionState) ProtoMessage() {}

func (x *SessionState) ProtoReflect() protoreflect.Message {
	mi := &file_coprocess_session_state_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionState.ProtoReflect.Descriptor instead.
func (*SessionState) Descriptor() ([]byte, []int) {
	return file_coprocess_session_state_proto_rawDescGZIP(), []int{5}
}

func (x *SessionState) GetLastCheck() int64 {
	if x != nil {
		return x.LastCheck
	}
	return 0
}

func (x *SessionState) GetAllowance() float64 {
	if x != nil {
		return x.Allowance
	}
	return 0
}

func (x *SessionState) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *SessionState) GetPer() float64 {
	if x != nil {
		return x.Per
	}
	return 0
}

func (x *SessionState) GetExpires() int64 {
	if x != nil {
		return x.Expires
	}
	return 0
}

func (x *SessionState) GetQuotaMax() int64 {
	if x != nil {
		return x.QuotaMax
	}
	return 0
}

func (x *SessionState) GetQuotaRenews() int64 {
	if x != nil {
		return x.QuotaRenews
	}
	return 0
}

func (x *SessionState) GetQuotaRemaining() int64 {
	if x != nil {
		return x.QuotaRemaining
	}
	return 0
}

func (x *SessionState) GetQuotaRenewalRate() int64 {
	if x != nil {
		return x.QuotaRenewalRate
	}
	return 0
}

func (x *SessionState) GetAccessRights() map[string]*AccessDefinition {
	if x != nil {
		return x.AccessRights
	}
	return nil
}

func (x *SessionState) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *SessionState) GetOauthClientId() string {
	if x != nil {
		return x.OauthClientId
	}
	return ""
}

func (x *SessionState) GetOauthKeys() map[string]string {
	if x != nil {
		return x.OauthKeys
	}
	return nil
}

func (x *SessionState) GetBasicAuthData() *BasicAuthData {
	if x != nil {
		return x.BasicAuthData
	}
	return nil
}

func (x *SessionState) GetJwtData() *JWTData {
	if x != nil {
		return x.JwtData
	}
	return nil
}

func (x *SessionState) GetHmacEnabled() bool {
	if x != nil {
		return x.HmacEnabled
	}
	return false
}

func (x *SessionState) GetHmacSecret() string {
	if x != nil {
		return x.HmacSecret
	}
	return ""
}

func (x *SessionState) GetIsInactive() bool {
	if x != nil {
		return x.IsInactive
	}
	return false
}

func (x *SessionState) GetApplyPolicyId() string {
	if x != nil {
		return x.ApplyPolicyId
	}
	return ""
}

func (x *SessionState) GetDataExpires() int64 {
	if x != nil {
		return x.DataExpires
	}
	return 0
}

func (x *SessionState) GetMonitor() *Monitor {
	if x != nil {
		return x.Monitor
	}
	return nil
}

func (x *SessionState) GetEnableDetailedRecording() bool {
	if x != nil {
		return x.EnableDetailedRecording
	}
	return false
}

func (x *SessionState) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SessionState) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *SessionState) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *SessionState) GetLastUpdated() string {
	if x != nil {
		return x.LastUpdated
	}
	return ""
}

func (x *SessionState) GetIdExtractorDeadline() int64 {
	if x != nil {
		return x.IdExtractorDeadline
	}
	return 0
}

func (x *SessionState) GetSessionLifetime() int64 {
	if x != nil {
		return x.SessionLifetime
	}
	return 0
}

func (x *SessionState) GetApplyPolicies() []string {
	if x != nil {
		return x.ApplyPolicies
	}
	return nil
}

func (x *SessionState) GetCertificate() string {
	if x != nil {
		return x.Certificate
	}
	return ""
}

func (x *SessionState) GetMaxQueryDepth() int64 {
	if x != nil {
		return x.MaxQueryDepth
	}
	return 0
}

func (x *SessionState) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

var File_coprocess_session_state_proto protoreflect.FileDescriptor

const file_coprocess_session_state_proto_rawDesc = "" +
	"\n" +
	"\x1dcoprocess_session_state.proto\x12\tcoprocess\"8\n" +
	"\n" +
	"AccessSpec\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12\x18\n" +
	"\amethods\x18\x02 \x03(\tR\amethods\"\x9a\x01\n" +
	"\x10AccessDefinition\x12\x19\n" +
	"\bapi_name\x18\x01 \x01(\tR\aapiName\x12\x15\n" +
	"\x06api_id\x18\x02 \x01(\tR\x05apiId\x12\x1a\n" +
	"\bversions\x18\x03 \x03(\tR\bversions\x128\n" +
	"\fallowed_urls\x18\x04 \x03(\v2\x15.coprocess.AccessSpecR\vallowedUrls\"?\n" +
	"\rBasicAuthData\x12\x1a\n" +
	"\bpassword\x18\x01 \x01(\tR\bpassword\x12\x12\n" +
	"\x04hash\x18\x02 \x01(\tR\x04hash\"!\n" +
	"\aJWTData\x12\x16\n" +
	"\x06secret\x18\x01 \x01(\tR\x06secret\"0\n" +
	"\aMonitor\x12%\n" +
	"\x0etrigger_limits\x18\x01 \x03(\x01R\rtriggerLimits\"\xd3\v\n" +
	"\fSessionState\x12\x1d\n" +
	"\n" +
	"last_check\x18\x01 \x01(\x03R\tlastCheck\x12\x1c\n" +
	"\tallowance\x18\x02 \x01(\x01R\tallowance\x12\x12\n" +
	"\x04rate\x18\x03 \x01(\x01R\x04rate\x12\x10\n" +
	"\x03per\x18\x04 \x01(\x01R\x03per\x12\x18\n" +
	"\aexpires\x18\x05 \x01(\x03R\aexpires\x12\x1b\n" +
	"\tquota_max\x18\x06 \x01(\x03R\bquotaMax\x12!\n" +
	"\fquota_renews\x18\a \x01(\x03R\vquotaRenews\x12'\n" +
	"\x0fquota_remaining\x18\b \x01(\x03R\x0equotaRemaining\x12,\n" +
	"\x12quota_renewal_rate\x18\t \x01(\x03R\x10quotaRenewalRate\x12N\n" +
	"\raccess_rights\x18\n" +
	" \x03(\v2).coprocess.SessionState.AccessRightsEntryR\faccessRights\x12\x15\n" +
	"\x06org_id\x18\v \x01(\tR\x05orgId\x12&\n" +
	"\x0foauth_client_id\x18\f \x01(\tR\roauthClientId\x12E\n" +
	"\n" +
	"oauth_keys\x18\r \x03(\v2&.coprocess.SessionState.OauthKeysEntryR\toauthKeys\x12@\n" +
	"\x0fbasic_auth_data\x18\x0e \x01(\v2\x18.coprocess.BasicAuthDataR\rbasicAuthData\x12-\n" +
	"\bjwt_data\x18\x0f \x01(\v2\x12.coprocess.JWTDataR\ajwtData\x12!\n" +
	"\fhmac_enabled\x18\x10 \x01(\bR\vhmacEnabled\x12\x1f\n" +
	"\vhmac_secret\x18\x11 \x01(\tR\n" +
	"hmacSecret\x12\x1f\n" +
	"\vis_inactive\x18\x12 \x01(\bR\n" +
	"isInactive\x12&\n" +
	"\x0fapply_policy_id\x18\x13 \x01(\tR\rapplyPolicyId\x12!\n" +
	"\fdata_expires\x18\x14 \x01(\x03R\vdataExpires\x12,\n" +
	"\amonitor\x18\x15 \x01(\v2\x12.coprocess.MonitorR\amonitor\x12:\n" +
	"\x19enable_detailed_recording\x18\x16 \x01(\bR\x17enableDetailedRecording\x12A\n" +
	"\bmetadata\x18\x17 \x03(\v2%.coprocess.SessionState.MetadataEntryR\bmetadata\x12\x12\n" +
	"\x04tags\x18\x18 \x03(\tR\x04tags\x12\x14\n" +
	"\x05alias\x18\x19 \x01(\tR\x05alias\x12!\n" +
	"\flast_updated\x18\x1a \x01(\tR\vlastUpdated\x122\n" +
	"\x15id_extractor_deadline\x18\x1b \x01(\x03R\x13idExtractorDeadline\x12)\n" +
	"\x10session_lifetime\x18\x1c \x01(\x03R\x0fsessionLifetime\x12%\n" +
	"\x0eapply_policies\x18\x1d \x03(\tR\rapplyPolicies\x12 \n" +
	"\vcertificate\x18\x1e \x01(\tR\vcertificate\x12&\n" +
	"\x0fmax_query_depth\x18\x1f \x01(\x03R\rmaxQueryDepth\x12\x15\n" +
	"\x06key_id\x18  \x01(\tR\x05keyId\x1a\\\n" +
	"\x11AccessRightsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.coprocess.AccessDefinitionR\x05value:\x028\x01\x1a<\n" +
	"\x0eOauthKeysEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\fZ\n" +
	"/coprocessb\x06proto3"

var (
	file_coprocess_session_state_proto_rawDescOnce sync.Once
	file_coprocess_session_state_proto_rawDescData []byte
)

func file_coprocess_session_state_proto_rawDescGZIP() []byte {
	file_coprocess_session_state_proto_rawDescOnce.Do(func() {
		file_coprocess_session_state_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_coprocess_session_state_proto_rawDesc), len(file_coprocess_session_state_proto_rawDesc)))
	})
	return file_coprocess_session_state_proto_rawDescData
}

var file_coprocess_session_state_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_coprocess_session_state_proto_goTypes = []any{
	(*AccessSpec)(nil),       // 0: coprocess.AccessSpec
	(*AccessDefinition)(nil), // 1: coprocess.AccessDefinition
	(*BasicAuthData)(nil),    // 2: coprocess.BasicAuthData
	(*JWTData)(nil),          // 3: coprocess.JWTData
	(*Monitor)(nil),          // 4: coprocess.Monitor
	(*SessionState)(nil),     // 5: coprocess.SessionState
	nil,                      // 6: coprocess.SessionState.AccessRightsEntry
	nil,                      // 7: coprocess.SessionState.OauthKeysEntry
	nil,                      // 8: coprocess.SessionState.MetadataEntry
}
var file_coprocess_session_state_proto_depIdxs = []int32{
	0, // 0: coprocess.AccessDefinition.allowed_urls:type_name -> coprocess.AccessSpec
	6, // 1: coprocess.SessionState.access_rights:type_name -> coprocess.SessionState.AccessRightsEntry
	7, // 2: coprocess.SessionState.oauth_keys:type_name -> coprocess.SessionState.OauthKeysEntry
	2, // 3: coprocess.SessionState.basic_auth_data:type_name -> coprocess.BasicAuthData
	3, // 4: coprocess.SessionState.jwt_data:type_name -> coprocess.JWTData
	4, // 5: coprocess.SessionState.monitor:type_name -> coprocess.Monitor
	8, // 6: coprocess.SessionState.metadata:type_name -> coprocess.SessionState.MetadataEntry
	1, // 7: coprocess.SessionState.AccessRightsEntry.value:type_name -> coprocess.AccessDefinition
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_coprocess_session_state_proto_init() }
func file_coprocess_session_state_proto_init() {
	if File_coprocess_session_state_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_coprocess_session_state_proto_rawDesc), len(file_coprocess_session_state_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_coprocess_session_state_proto_goTypes,
		DependencyIndexes: file_coprocess_session_state_proto_depIdxs,
		MessageInfos:      file_coprocess_session_state_proto_msgTypes,
	}.Build()
	File_coprocess_session_state_proto = out.File
	file_coprocess_session_state_proto_goTypes = nil
	file_coprocess_session_state_proto_depIdxs = nil
}
