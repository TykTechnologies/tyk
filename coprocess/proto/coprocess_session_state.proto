syntax = "proto3";

package coprocess;

option go_package = "/coprocess";

// AccessSpec defines an API's URL (endpoint) and associated list of allowed methods.
message AccessSpec {
  // Url is a URL (endpoint) belonging to the API associated with the request session.
  string url = 1;

  // Methods is a list of allowed methods for the URL (endpoint), e.g. 'methods': [ 'GET'. 'POST', 'PUT', 'PATCH' ]
  // The list of methods are case sensitive.
  repeated string methods = 2;
}

// AccessDefinition is defined as an attribute within a SessionState instance.
// Contains the allowed versions and URLs (endpoints) for the API that the session request relates to.
// Each URL (endpoint) specifies an associated list of allowed methods. See also AccessSpec.
message AccessDefinition {
  
  // ApiName is the name of the API that the session request relates to.
  string api_name = 1;
  
  // ApiId is the ID of the API that the session request relates to.
  string api_id = 2;

  // Versions is a list of allowed API versions, e.g.  `"versions": [ "Default" ]`.
  repeated string versions = 3;

  // AllowedUrls is a list of AccessSpec instances. Each instance defines a URL (endpoint) 
  // with an associated allowed list of methods. If all URLs (endpoints) are allowed then the 
  // attribute is not set.
  repeated AccessSpec allowed_urls = 4;
}

// BasicAuthData contains a hashed password and the name of the hashing algorithm used.
message BasicAuthData {

  // Password is a hashed password.
  string password = 1;

  // Hash is the name of the hashing algorithm used to hash the password, e.g. bcrypt, Argon2.
  string hash = 2;
}

// JWTData is added to sessions where a Tyk key (embedding a shared secret) is used as the public key for 
// signing the JWT. This message contains the shared secret.
message JWTData {
  // Secret is the shared secret.
  string secret = 1;
}

// Monitor allows API endpoint users, stakeholders or an organisation to be notified by webhook when
// certain quota limits have been reached for their session token.
message Monitor {

  // TriggerLimits is a list of quota percentage limits, defined in descending order.
  repeated double trigger_limits = 1;
}

// SessionState is created for every authenticated request and stored in Redis.
// Used to track the activity of a given key in different ways, mainly by the built-in
// Tyk middleware such as the quota middleware or the rate limiter. A GRPC plugin is
// able to create a SessionState object and store it in the same way built-in
// authentication mechanisms do.
message SessionState {

  // LastCheck is deprecated.
  int64 last_check = 1;

  // Allowance is deprecated, replaced by rate.
  double allowance = 2;
  
  // Rate is the number of requests that are allowed in the specified rate limiting window.
  double rate = 3;

  // Per is the duration of the rate window, in seconds.
  double per = 4;

  // Expires is an epoch that defines when the key should expire.
  int64 expires = 5;
  
  // QuotaMax is the maximum number of requests allowed during the quota period.
  int64 quota_max = 6;
  
  // QuotaRenews is an epoch that defines when the quota renews.
  int64 quota_renews = 7;
  
  // QuotaRemaining is the number of requests remaining for this user’s quota (unrelated to rate
  // limit).
  int64 quota_remaining = 8;

  // QuotaRenewalRate is the time in seconds during which the quota is valid.
  // So for 1000 requests per hour, this value would be 3600 while quota_max and
  // quota_remaining would be 1000.
  int64 quota_renewal_rate = 9;

  // AccessRights maps the session's API ID to an AccessDefinition. The AccessDefinition defines the access rights for the API in terms
  // of allowed: versions and URLs(endpoints). Each URL (endpoint) has a list of allowed methods.
  map<string, AccessDefinition> access_rights = 10;

  // OrgId represents the organisation the session user belongs to. This can be used in conjunction with the org_id
  // setting in the API Definition object to have tokens owned by organisations.
  string org_id = 11;
  
  // OauthClientId is the OAuth client ID that is set if the token is generated by an OAuth client during an
  // OAuth authorisation flow.
  string oauth_client_id = 12;
  
  // OauthKeys maps an OAuth client ID with a corresponding access token value. Currently unsupported and under development.
  map<string, string> oauth_keys = 13;

  // BasicAuthData contains a hashed password and the name of the hashing algorithm used.
  BasicAuthData basic_auth_data = 14;

  // JwtData is added to sessions where a Tyk key (embedding a shared secret) is used as the public key
  // for signing the JWT. The JWT token's KID header value references the ID of a Tyk key.
  JWTData jwt_data = 15;

  // HmacEnabled is set to `true` to indicate generation of a HMAC signature using the secret provided in `hmac_secret`.
  // If the generated signature matches the signature provided in the Authorizaton header then authentication of
  // the request has passed.
  bool hmac_enabled = 16;

  // HmacSecret represents the HMAC secret.
  string hmac_secret = 17;

  // IsInactive when set to true, indicates that access is denied.
  bool is_inactive = 18;
  
  // ApplyPolicyId represents the policy ID that is bound to the token. Deprecated use apply_policies instead.
  string apply_policy_id = 19;

  // DataExpires is a value, in seconds, that defines when data generated by the session token expires in
  // the analytics DB (must be using Pro edition and MongoDB).
  int64 data_expires = 20;

  // Monitor represents the quota monitor settings, currently unsupported in gRPC sessions.
  Monitor monitor = 21;

  // EnableDetailedRecording should be set to true to have Tyk store the inbound request and outbound
  // response data in HTTP Wire format as part of the analytics data.
  bool enable_detailed_recording = 22;

  // Metadata represents meta-data to be included as part of the session that can be used in other
  // middleware such as transforms and header injection to embed user-specific
  // data into a request, or alternatively to query the providence of a key.
  map<string, string> metadata = 23;

  // Tags is a list of tags to embed into analytics data when the request completes. If a policy
  // has tags, those tags take precedence and are used instead.
  repeated string tags = 24;
  
  // Alias is an identifier for the token for use in analytics, to allow easier tracing of hashed 
  // and unhashed tokens.
  string alias = 25;
  
  // LastUpdated is a timestamp that represents the time the session was last updated.
  // With *PostAuth* hooks this is a UNIX timestamp.
  string last_updated = 26;

  // IdExtractorDeadline is a UNIX timestamp that signifies when a cached key or ID will expire. 
  // This relates to custom authentication, where authenticated keys can be cached to save repeated requests
  // to the gRPC server.
  int64 id_extractor_deadline = 27;
  
  // SessionLifetime is a UNIX timestamp that denotes when the key will automatically expire.
  // Any·subsequent API request made using the key will be rejected.
  // Overrides the global session lifetime.
  int64 session_lifetime = 28;

  // ApplyPolicies is a list of IDs for the policies that are bound to the token.
  repeated string apply_policies = 29;

  // Certificate is the client certificate used to authenticate the request. Exists in the session instance if mTLS is configured
  // for the API. Currently unsupported.
  string certificate = 30;

  // MaxQueryDepth relates to graphQL APIs. If the session key has a maximum query depth limit defined then it is included in the
  // session instance. Currently unsupported and under development.
  int64 max_query_depth = 31;
}
