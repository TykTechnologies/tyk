syntax = "proto3";

import "coprocess_mini_request_object.proto";
import "coprocess_response_object.proto";
import "coprocess_session_state.proto";
import "coprocess_common.proto";

package coprocess;

option go_package = "/coprocess";

// Object wraps a MiniRequestObject and contains additional fields that are useful for users that implement
// their own request dispatchers, like the middleware hook type and name.
message Object {

  // HookType is an enumeration that identifies the plugin hook type.
  HookType hook_type = 1;
  
  // HookName is the plugin name.
  string hook_name = 2;

  // Request relates to the main request data structure used by rich plugins. It’s used for middleware calls 
  // and contains important fields like headers, parameters, body and URL.
  MiniRequestObject request = 3;

  // Session stores information about the current key/user that’s used for authentication.
  SessionState session = 4;
  
  // Metadata is a dynamic filed that contains the metadata.
  map<string, string> metadata = 5;

  // Spec contains information about API definition, including APIID, OrgID and config_data.
  map<string, string> spec = 6;

  // Response relates to the ResponseObject used by response hooks. The fields are populated with the upstream HTTP
  // response data. All the field contents can be modified.
  ResponseObject response = 7;

  // OpenTelemetry trace context fields for distributed tracing support.
  // These are dedicated fields rather than being stored in the metadata map for several reasons:
  // 1. Type safety - trace_flags is uint32, not string
  // 2. API clarity - self-documenting and discoverable
  // 3. No collision risk with user-defined metadata keys
  // 4. Better performance - direct field access vs map lookup
  // 5. Consistent with OpenTelemetry standards - trace context is infrastructure, not user metadata
  //
  // Note: For gRPC plugins, trace context is also automatically propagated through gRPC metadata
  // via OpenTelemetry interceptors. These fields provide additional access for logging and are
  // used by non-gRPC plugins (Python, Lua) that cannot use gRPC metadata.

  // TraceID is the OpenTelemetry trace ID in hexadecimal format (32 characters).
  // Example: "1234567890abcdef1234567890abcdef"
  string trace_id = 8;

  // SpanID is the OpenTelemetry span ID in hexadecimal format (16 characters).
  // Example: "1234567890abcdef"
  string span_id = 9;

  // TraceFlags represents the OpenTelemetry trace flags (8 bits stored as uint32).
  // Bit 0 (least significant) is the "sampled" flag (1 = sampled, 0 = not sampled).
  // Example: 1 (sampled), 0 (not sampled)
  uint32 trace_flags = 10;
}

// Event is represented as a JSON payload.
message Event {

  // Payload represents the JSON payload.
  string payload = 1;
}

// EventReply is the response for event.
message EventReply {}

// Dispatcher is the service interface that must be implemented by the target language.
service Dispatcher {
  // Dispatch is an RPC method that accepts and returns an Object.
  rpc Dispatch (Object) returns (Object) {}

  // DispatchEvent dispatches an event to the target language.
  rpc DispatchEvent (Event) returns (EventReply) {}
}
