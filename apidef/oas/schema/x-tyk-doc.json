{
  "doc": "root",
  "json_name": "x-tyk-gateway",
  "fields": [
    {
      "doc": "Info contains the main metadata about the API definition.\n",
      "json_name": "info",
      "fields": [
        {
          "doc": "ID is the unique ID of the API.\nOld API Definition: `api_id`\n",
          "json_name": "id",
          "json_type": "string",
          "go_name": "Info.ID",
          "is_array": false
        },
        {
          "doc": "DBID is the unique database ID of the API.\nOld API Definition: `id`\n",
          "json_name": "dbId",
          "json_type": "",
          "go_name": "Info.DBID",
          "is_array": false
        },
        {
          "doc": "OrgID is the ID of the organisation which the API belongs to.\nOld API Definition: `org_id`\n",
          "json_name": "orgId",
          "json_type": "string",
          "go_name": "Info.OrgID",
          "is_array": false
        },
        {
          "doc": "Name is the name of the API.\nOld API Definition: `name`\n",
          "json_name": "name",
          "json_type": "string",
          "go_name": "Info.Name",
          "is_array": false
        },
        {
          "doc": "",
          "json_name": "expiration",
          "json_type": "string",
          "go_name": "Info.Expiration",
          "is_array": false
        },
        {
          "doc": "",
          "json_name": "state",
          "fields": [
            {
              "doc": "Active enables the API.\nOld API Definition: `active`\n",
              "json_name": "active",
              "json_type": "boolean",
              "go_name": "State.Active",
              "is_array": false
            },
            {
              "doc": "Internal makes the API accessible only internally.\nOld API Definition: `internal`\n",
              "json_name": "internal",
              "json_type": "boolean",
              "go_name": "State.Internal",
              "is_array": false
            }
          ],
          "json_type": "object",
          "go_name": "State",
          "is_array": false
        },
        {
          "doc": "",
          "json_name": "versioning",
          "fields": [
            {
              "doc": "",
              "json_name": "enabled",
              "json_type": "boolean",
              "go_name": "Versioning.Enabled",
              "is_array": false
            },
            {
              "doc": "",
              "json_name": "name",
              "json_type": "string",
              "go_name": "Versioning.Name",
              "is_array": false
            },
            {
              "doc": "",
              "json_name": "default",
              "json_type": "string",
              "go_name": "Versioning.Default",
              "is_array": false
            },
            {
              "doc": "",
              "json_name": "location",
              "json_type": "string",
              "go_name": "Versioning.Location",
              "is_array": false
            },
            {
              "doc": "",
              "json_name": "key",
              "json_type": "string",
              "go_name": "Versioning.Key",
              "is_array": false
            },
            {
              "doc": "",
              "json_name": "versions",
              "fields": [
                {
                  "doc": "",
                  "json_name": "name",
                  "json_type": "string",
                  "go_name": "Versions.Name",
                  "is_array": false
                },
                {
                  "doc": "",
                  "json_name": "id",
                  "json_type": "string",
                  "go_name": "Versions.ID",
                  "is_array": false
                }
              ],
              "json_type": "object",
              "go_name": "Versions",
              "is_array": true
            },
            {
              "doc": "",
              "json_name": "stripVersioningData",
              "json_type": "boolean",
              "go_name": "Versioning.StripVersioningData",
              "is_array": false
            }
          ],
          "json_type": "object",
          "go_name": "Versioning",
          "is_array": false
        }
      ],
      "json_type": "object",
      "go_name": "Info",
      "is_array": false
    },
    {
      "doc": "Upstream contains the configurations related to the upstream.\n",
      "json_name": "upstream",
      "fields": [
        {
          "doc": "URL defines the target URL that the request should be proxied to.\nOld API Definition: `proxy.target_url`\n",
          "json_name": "url",
          "json_type": "string",
          "go_name": "Upstream.URL",
          "is_array": false
        },
        {
          "doc": "ServiceDiscovery contains the configuration related to Service Discovery.\nOld API Definition: `proxy.service_discovery`\n",
          "json_name": "serviceDiscovery",
          "fields": [
            {
              "doc": "Enabled enables Service Discovery.\nOld API Definition: `service_discovery.use_discovery_service`\n",
              "json_name": "enabled",
              "json_type": "boolean",
              "go_name": "ServiceDiscovery.Enabled",
              "is_array": false
            },
            {
              "doc": "QueryEndpoint is the endpoint to call, this would usually be Consul, etcd or Eureka K/V store.\nOld API Definition: `service_discovery.query_endpoint`\n",
              "json_name": "queryEndpoint",
              "json_type": "string",
              "go_name": "ServiceDiscovery.QueryEndpoint",
              "is_array": false
            },
            {
              "doc": "DataPath is the namespace of the data path - where exactly in your service response the namespace can be found.\nFor example, if your service responds with:\n```\n{\n\"action\": \"get\",\n\"node\": {\n\"key\": \"/services/single\",\n\"value\": \"http://httpbin.org:6000\",\n\"modifiedIndex\": 6,\n\"createdIndex\": 6\n}\n}\n```\nthen your namespace would be `node.value`.\nOld API Definition: `service_discovery.data_path`\n",
              "json_name": "dataPath",
              "json_type": "string",
              "go_name": "ServiceDiscovery.DataPath",
              "is_array": false
            },
            {
              "doc": "UseNestedQuery enables using a combination of `dataPath` and `parentDataPath`.\nIt is necessary when the data lives within this string-encoded JSON object.\n```\n{\n\"action\": \"get\",\n\"node\": {\n\"key\": \"/services/single\",\n\"value\": \"{\"hostname\": \"http://httpbin.org\", \"port\": \"80\"}\",\n\"modifiedIndex\": 6,\n\"createdIndex\": 6\n}\n}\n```\nOld API Definition: `service_discovery.use_nested_query`\n",
              "json_name": "useNestedQuery",
              "json_type": "boolean",
              "go_name": "ServiceDiscovery.UseNestedQuery",
              "is_array": false
            },
            {
              "doc": "ParentDataPath is the namespace of the where to find the nested value, if `useNestedQuery` is `true`.\nIn the above example, it would be `node.value`. You would then change the `dataPath` setting to be `hostname`,\nsince this is where the host name data resides in the JSON string.\nTyk automatically assumes that `dataPath` in this case is in a string-encoded JSON object and will try to deserialize it.\nOld API Definition: `service_discovery.parent_data_path`\n",
              "json_name": "parentDataPath",
              "json_type": "string",
              "go_name": "ServiceDiscovery.ParentDataPath",
              "is_array": false
            },
            {
              "doc": "PortDataPath is the port of the data path. In the above nested example, we can see that there is a separate `port` value\nfor the service in the nested JSON. In this case, you can set the `portDataPath` value and Tyk will treat `dataPath`\nas the hostname and zip them together (this assumes that the hostname element does not end in a slash or resource identifier\nsuch as `/widgets/`). In the above example, the `portDataPath` would be `port`.\nOld API Definition: `service_discovery.port_data_path`\n",
              "json_name": "portDataPath",
              "json_type": "string",
              "go_name": "ServiceDiscovery.PortDataPath",
              "is_array": false
            },
            {
              "doc": "UseTargetList should be set to `true`, if you are using load balancing. Tyk will treat the data path as a list and\ninject it into the target list of your API Definition.\nOld API Definition: `service_discovery.use_target_list`\n",
              "json_name": "useTargetList",
              "json_type": "boolean",
              "go_name": "ServiceDiscovery.UseTargetList",
              "is_array": false
            },
            {
              "doc": "CacheTimeout is the timeout of a cache value when a new data is loaded from a discovery service.\nSetting it too low will cause Tyk to call the SD service too often, setting it too high could mean that\nfailures are not recovered from quickly enough.\nOld API Definition: `service_discovery.cache_timeout`\n",
              "json_name": "cacheTimeout",
              "json_type": "number",
              "go_name": "ServiceDiscovery.CacheTimeout",
              "is_array": false
            },
            {
              "doc": "TargetPath is to set a target path to append to the discovered endpoint, since many SD services\nonly provide host and port data. It is important to be able to target a specific resource on that host.\nSetting this value will enable that.\nOld API Definition: `service_discovery.target_path`\n",
              "json_name": "targetPath",
              "json_type": "string",
              "go_name": "ServiceDiscovery.TargetPath",
              "is_array": false
            },
            {
              "doc": "EndpointReturnsList is set `true` when the response type is a list instead of an object.\nOld API Definition: `service_discovery.endpoint_returns_list`\n",
              "json_name": "endpointReturnsList",
              "json_type": "boolean",
              "go_name": "ServiceDiscovery.EndpointReturnsList",
              "is_array": false
            }
          ],
          "json_type": "object",
          "go_name": "ServiceDiscovery",
          "is_array": false
        },
        {
          "doc": "Test contains the configuration related to uptime tests.\n",
          "json_name": "test",
          "fields": [
            {
              "doc": "ServiceDiscovery contains the configuration related to test Service Discovery.\nOld API Definition: `proxy.service_discovery`\n",
              "json_name": "serviceDiscovery",
              "fields": [
                {
                  "doc": "Enabled enables Service Discovery.\nOld API Definition: `service_discovery.use_discovery_service`\n",
                  "json_name": "enabled",
                  "json_type": "boolean",
                  "go_name": "ServiceDiscovery.Enabled",
                  "is_array": false
                },
                {
                  "doc": "QueryEndpoint is the endpoint to call, this would usually be Consul, etcd or Eureka K/V store.\nOld API Definition: `service_discovery.query_endpoint`\n",
                  "json_name": "queryEndpoint",
                  "json_type": "string",
                  "go_name": "ServiceDiscovery.QueryEndpoint",
                  "is_array": false
                },
                {
                  "doc": "DataPath is the namespace of the data path - where exactly in your service response the namespace can be found.\nFor example, if your service responds with:\n```\n{\n\"action\": \"get\",\n\"node\": {\n\"key\": \"/services/single\",\n\"value\": \"http://httpbin.org:6000\",\n\"modifiedIndex\": 6,\n\"createdIndex\": 6\n}\n}\n```\nthen your namespace would be `node.value`.\nOld API Definition: `service_discovery.data_path`\n",
                  "json_name": "dataPath",
                  "json_type": "string",
                  "go_name": "ServiceDiscovery.DataPath",
                  "is_array": false
                },
                {
                  "doc": "UseNestedQuery enables using a combination of `dataPath` and `parentDataPath`.\nIt is necessary when the data lives within this string-encoded JSON object.\n```\n{\n\"action\": \"get\",\n\"node\": {\n\"key\": \"/services/single\",\n\"value\": \"{\"hostname\": \"http://httpbin.org\", \"port\": \"80\"}\",\n\"modifiedIndex\": 6,\n\"createdIndex\": 6\n}\n}\n```\nOld API Definition: `service_discovery.use_nested_query`\n",
                  "json_name": "useNestedQuery",
                  "json_type": "boolean",
                  "go_name": "ServiceDiscovery.UseNestedQuery",
                  "is_array": false
                },
                {
                  "doc": "ParentDataPath is the namespace of the where to find the nested value, if `useNestedQuery` is `true`.\nIn the above example, it would be `node.value`. You would then change the `dataPath` setting to be `hostname`,\nsince this is where the host name data resides in the JSON string.\nTyk automatically assumes that `dataPath` in this case is in a string-encoded JSON object and will try to deserialize it.\nOld API Definition: `service_discovery.parent_data_path`\n",
                  "json_name": "parentDataPath",
                  "json_type": "string",
                  "go_name": "ServiceDiscovery.ParentDataPath",
                  "is_array": false
                },
                {
                  "doc": "PortDataPath is the port of the data path. In the above nested example, we can see that there is a separate `port` value\nfor the service in the nested JSON. In this case, you can set the `portDataPath` value and Tyk will treat `dataPath`\nas the hostname and zip them together (this assumes that the hostname element does not end in a slash or resource identifier\nsuch as `/widgets/`). In the above example, the `portDataPath` would be `port`.\nOld API Definition: `service_discovery.port_data_path`\n",
                  "json_name": "portDataPath",
                  "json_type": "string",
                  "go_name": "ServiceDiscovery.PortDataPath",
                  "is_array": false
                },
                {
                  "doc": "UseTargetList should be set to `true`, if you are using load balancing. Tyk will treat the data path as a list and\ninject it into the target list of your API Definition.\nOld API Definition: `service_discovery.use_target_list`\n",
                  "json_name": "useTargetList",
                  "json_type": "boolean",
                  "go_name": "ServiceDiscovery.UseTargetList",
                  "is_array": false
                },
                {
                  "doc": "CacheTimeout is the timeout of a cache value when a new data is loaded from a discovery service.\nSetting it too low will cause Tyk to call the SD service too often, setting it too high could mean that\nfailures are not recovered from quickly enough.\nOld API Definition: `service_discovery.cache_timeout`\n",
                  "json_name": "cacheTimeout",
                  "json_type": "number",
                  "go_name": "ServiceDiscovery.CacheTimeout",
                  "is_array": false
                },
                {
                  "doc": "TargetPath is to set a target path to append to the discovered endpoint, since many SD services\nonly provide host and port data. It is important to be able to target a specific resource on that host.\nSetting this value will enable that.\nOld API Definition: `service_discovery.target_path`\n",
                  "json_name": "targetPath",
                  "json_type": "string",
                  "go_name": "ServiceDiscovery.TargetPath",
                  "is_array": false
                },
                {
                  "doc": "EndpointReturnsList is set `true` when the response type is a list instead of an object.\nOld API Definition: `service_discovery.endpoint_returns_list`\n",
                  "json_name": "endpointReturnsList",
                  "json_type": "boolean",
                  "go_name": "ServiceDiscovery.EndpointReturnsList",
                  "is_array": false
                }
              ],
              "json_type": "object",
              "go_name": "ServiceDiscovery",
              "is_array": false
            }
          ],
          "json_type": "object",
          "go_name": "Test",
          "is_array": false
        },
        {
          "doc": "",
          "json_name": "certificates",
          "json_type": "",
          "go_name": "Upstream.Certificates",
          "is_array": false
        },
        {
          "doc": "",
          "json_name": "pinnedPublicKeys",
          "json_type": "",
          "go_name": "Upstream.PinnedPublicKeys",
          "is_array": false
        }
      ],
      "json_type": "object",
      "go_name": "Upstream",
      "is_array": false
    },
    {
      "doc": "Server contains the configurations related to the server.\n",
      "json_name": "server",
      "fields": [
        {
          "doc": "ListenPath represents the path to listen on. Any requests coming into the host, on the port that Tyk is configured to run on,\nthat match this path will have the rules defined in the API Definition applied.\n",
          "json_name": "listenPath",
          "fields": [
            {
              "doc": "Value is the value of the listen path e.g. `/api/` or `/` or `/httpbin/`.\nOld API Definition: `proxy.listen_path`\n",
              "json_name": "value",
              "json_type": "string",
              "go_name": "ListenPath.Value",
              "is_array": false
            },
            {
              "doc": "Strip removes the inbound listen path in the outgoing request. e.g. `http://acme.com/httpbin/get` where `httpbin`\nis the listen path. The `httpbin` listen path which is used to identify the API loaded in Tyk is removed,\nand the outbound request would be `http://httpbin.org/get`.\nOld API Definition: `proxy.strip_listen_path`\n",
              "json_name": "strip",
              "json_type": "boolean",
              "go_name": "ListenPath.Strip",
              "is_array": false
            }
          ],
          "json_type": "object",
          "go_name": "ListenPath",
          "is_array": false
        },
        {
          "doc": "Slug is the Tyk Cloud equivalent of listen path.\nOld API Definition: `slug`\n",
          "json_name": "slug",
          "json_type": "string",
          "go_name": "Server.Slug",
          "is_array": false
        },
        {
          "doc": "Authentication contains the configurations related to authentication to the API.\n",
          "json_name": "authentication",
          "fields": [
            {
              "doc": "Enabled makes the API protected when one of the authentication modes is enabled.\nOld API Definition: `!use_keyless`\n",
              "json_name": "enabled",
              "json_type": "boolean",
              "go_name": "Authentication.Enabled",
              "is_array": false
            },
            {
              "doc": "StripAuthorizationData ensures that any security tokens used for accessing APIs are stripped and not leaked to the upstream.\nOld API Definition: `strip_auth_data`\n",
              "json_name": "stripAuthorizationData",
              "json_type": "boolean",
              "go_name": "Authentication.StripAuthorizationData",
              "is_array": false
            },
            {
              "doc": "BaseIdentityProvider enables multi authentication mechanism and provides the session object that determines rate limits, ACL rules and quotas.\nIt should be set to one of the following:\n- `auth_token`\n- `hmac_key`\n- `basic_auth_user`\n- `jwt_claim`\n- `oidc_user`\n- `oauth_key`\nOld API Definition: `base_identity_provided_by`\n",
              "json_name": "baseIdentityProvider",
              "json_type": "",
              "go_name": "Authentication.BaseIdentityProvider",
              "is_array": false
            },
            {
              "doc": "HMAC contains the configurations related to HMAC authentication mode.\nOld API Definition: `auth_configs[\"hmac\"]`\n",
              "json_name": "hmac",
              "fields": [
                {
                  "doc": "Enabled enables the HMAC authentication mode.\nOld API Definition: `enable_signature_checking`\n",
                  "json_name": "enabled",
                  "json_type": "boolean",
                  "go_name": "HMAC.Enabled",
                  "is_array": false
                },
                {
                  "doc": "AllowedAlgorithms is the array of HMAC algorithms which are allowed. Tyk supports the following HMAC algorithms:\n- `hmac-sha1`\n- `hmac-sha256`\n- `hmac-sha384`\n- `hmac-sha512`\nand reads the value from algorithm header.\nOld API Definition: `hmac_allowed_algorithms`\n",
                  "json_name": "allowedAlgorithms",
                  "json_type": "string",
                  "go_name": "HMAC.AllowedAlgorithms",
                  "is_array": true
                },
                {
                  "doc": "AllowedClockSkew is the amount of milliseconds that will be tolerated for clock skew. It is used against replay attacks.\nThe default value is `0`, which deactivates clock skew checks.\nOld API Definition: `hmac_allowed_clock_skew`\n",
                  "json_name": "allowedClockSkew",
                  "json_type": "number",
                  "go_name": "HMAC.AllowedClockSkew",
                  "is_array": false
                }
              ],
              "json_type": "object",
              "go_name": "HMAC",
              "is_array": false
            },
            {
              "doc": "OIDC contains the configurations related to OIDC authentication mode.\nOld API Definition: `auth_configs[\"oidc\"]`\n",
              "json_name": "oidc",
              "fields": [
                {
                  "doc": "Enabled enables the OIDC authentication mode.\nOld API Definition: `use_openid`\n",
                  "json_name": "enabled",
                  "json_type": "boolean",
                  "go_name": "OIDC.Enabled",
                  "is_array": false
                },
                {
                  "doc": "",
                  "json_name": "segregateByClientId",
                  "json_type": "boolean",
                  "go_name": "OIDC.SegregateByClientId",
                  "is_array": false
                },
                {
                  "doc": "",
                  "json_name": "providers",
                  "fields": [
                    {
                      "doc": "",
                      "json_name": "issuer",
                      "json_type": "string",
                      "go_name": "Providers.Issuer",
                      "is_array": false
                    },
                    {
                      "doc": "",
                      "json_name": "clientToPolicyMapping",
                      "fields": [
                        {
                          "doc": "",
                          "json_name": "clientId",
                          "json_type": "string",
                          "go_name": "ClientToPolicyMapping.ClientID",
                          "is_array": false
                        },
                        {
                          "doc": "",
                          "json_name": "policyId",
                          "json_type": "string",
                          "go_name": "ClientToPolicyMapping.PolicyID",
                          "is_array": false
                        }
                      ],
                      "json_type": "object",
                      "go_name": "ClientToPolicyMapping",
                      "is_array": true
                    }
                  ],
                  "json_type": "object",
                  "go_name": "Providers",
                  "is_array": true
                },
                {
                  "doc": "",
                  "json_name": "scopes",
                  "fields": [
                    {
                      "doc": "",
                      "json_name": "claimName",
                      "json_type": "string",
                      "go_name": "Scopes.ClaimName",
                      "is_array": false
                    },
                    {
                      "doc": "",
                      "json_name": "scopeToPolicyMapping",
                      "fields": [
                        {
                          "doc": "",
                          "json_name": "scope",
                          "json_type": "string",
                          "go_name": "ScopeToPolicyMapping.Scope",
                          "is_array": false
                        },
                        {
                          "doc": "",
                          "json_name": "policyId",
                          "json_type": "string",
                          "go_name": "ScopeToPolicyMapping.PolicyID",
                          "is_array": false
                        }
                      ],
                      "json_type": "object",
                      "go_name": "ScopeToPolicyMapping",
                      "is_array": true
                    }
                  ],
                  "json_type": "object",
                  "go_name": "Scopes",
                  "is_array": false
                }
              ],
              "json_type": "object",
              "go_name": "OIDC",
              "is_array": false
            },
            {
              "doc": "GoPlugin contains the configurations related to GoPlugin authentication mode.\n",
              "json_name": "goPlugin",
              "fields": [
                {
                  "doc": "Enabled enables the GoPlugin authentication mode.\nOld API Definition: `use_go_plugin_auth`\n",
                  "json_name": "enabled",
                  "json_type": "boolean",
                  "go_name": "GoPlugin.Enabled",
                  "is_array": false
                }
              ],
              "json_type": "object",
              "go_name": "GoPlugin",
              "is_array": false
            },
            {
              "doc": "CustomPlugin contains the configurations related to CustomPlugin authentication mode.\nOld API Definition: `auth_configs[\"coprocess\"]`\n",
              "json_name": "customPlugin",
              "fields": [
                {
                  "doc": "Enabled enables the CustomPlugin authentication mode.\nOld API Definition: `enable_coprocess_auth`\n",
                  "json_name": "enabled",
                  "json_type": "boolean",
                  "go_name": "CustomPlugin.Enabled",
                  "is_array": false
                }
              ],
              "json_type": "object",
              "go_name": "CustomPlugin",
              "is_array": false
            },
            {
              "doc": "",
              "json_name": "securitySchemes",
              "json_type": "",
              "go_name": "Authentication.SecuritySchemes",
              "is_array": false
            }
          ],
          "json_type": "object",
          "go_name": "Authentication",
          "is_array": false
        },
        {
          "doc": "ClientCertificates contains the configurations related to static mTLS.\n",
          "json_name": "clientCertificates",
          "fields": [
            {
              "doc": "Enabled enables static mTLS for the API.\n",
              "json_name": "enabled",
              "json_type": "boolean",
              "go_name": "ClientCertificates.Enabled",
              "is_array": false
            },
            {
              "doc": "AllowList is the list of client certificates which are allowed.\n",
              "json_name": "allowlist",
              "json_type": "string",
              "go_name": "ClientCertificates.Allowlist",
              "is_array": true
            }
          ],
          "json_type": "object",
          "go_name": "ClientCertificates",
          "is_array": false
        },
        {
          "doc": "GatewayTags contains segment tags to configure which GWs your APIs connect to\n",
          "json_name": "gatewayTags",
          "fields": [
            {
              "doc": "Enabled enables use of segment tags.\n",
              "json_name": "enabled",
              "json_type": "boolean",
              "go_name": "GatewayTags.Enabled",
              "is_array": false
            },
            {
              "doc": "Tags is a list of segment tags\n",
              "json_name": "tags",
              "json_type": "string",
              "go_name": "GatewayTags.Tags",
              "is_array": true
            }
          ],
          "json_type": "object",
          "go_name": "GatewayTags",
          "is_array": false
        },
        {
          "doc": "CustomDomain is the domain to bind this API to.\nOld API Definition: `domain`\n",
          "json_name": "customDomain",
          "json_type": "object",
          "go_name": "CustomDomain",
          "is_array": false
        }
      ],
      "json_type": "object",
      "go_name": "Server",
      "is_array": false
    },
    {
      "doc": "Middleware contains the configurations related to the proxy middleware.\n",
      "json_name": "middleware",
      "fields": [
        {
          "doc": "Global contains the configurations related to the global middleware.\n",
          "json_name": "global",
          "fields": [
            {
              "doc": "",
              "json_name": "cors",
              "fields": [
                {
                  "doc": "",
                  "json_name": "enabled",
                  "json_type": "boolean",
                  "go_name": "CORS.Enabled",
                  "is_array": false
                },
                {
                  "doc": "",
                  "json_name": "maxAge",
                  "json_type": "number",
                  "go_name": "CORS.MaxAge",
                  "is_array": false
                },
                {
                  "doc": "",
                  "json_name": "allowCredentials",
                  "json_type": "boolean",
                  "go_name": "CORS.AllowCredentials",
                  "is_array": false
                },
                {
                  "doc": "",
                  "json_name": "exposedHeaders",
                  "json_type": "string",
                  "go_name": "CORS.ExposedHeaders",
                  "is_array": true
                },
                {
                  "doc": "",
                  "json_name": "allowedHeaders",
                  "json_type": "string",
                  "go_name": "CORS.AllowedHeaders",
                  "is_array": true
                },
                {
                  "doc": "",
                  "json_name": "optionsPassthrough",
                  "json_type": "boolean",
                  "go_name": "CORS.OptionsPassthrough",
                  "is_array": false
                },
                {
                  "doc": "",
                  "json_name": "debug",
                  "json_type": "boolean",
                  "go_name": "CORS.Debug",
                  "is_array": false
                },
                {
                  "doc": "",
                  "json_name": "allowedOrigins",
                  "json_type": "string",
                  "go_name": "CORS.AllowedOrigins",
                  "is_array": true
                },
                {
                  "doc": "",
                  "json_name": "allowedMethods",
                  "json_type": "string",
                  "go_name": "CORS.AllowedMethods",
                  "is_array": true
                }
              ],
              "json_type": "object",
              "go_name": "CORS",
              "is_array": false
            },
            {
              "doc": "Cache contains the configurations related to caching.\nOld API Definition: `cache_options`\n",
              "json_name": "cache",
              "fields": [
                {
                  "doc": "Enabled turns global cache middleware on or off. It is still possible to enable caching on a per-path basis\nby explicitly setting the endpoint cache middleware.\nOld API Definition: `cache_options.enable_cache`\n",
                  "json_name": "enabled",
                  "json_type": "boolean",
                  "go_name": "Cache.Enabled",
                  "is_array": false
                },
                {
                  "doc": "Timeout is the TTL for a cached object in seconds.\nOld API Definition: `cache_options.cache_timeout`\n",
                  "json_name": "timeout",
                  "json_type": "number",
                  "go_name": "Cache.Timeout",
                  "is_array": false
                },
                {
                  "doc": "CacheAllSafeRequests caches responses to (`GET`, `HEAD`, `OPTIONS`) requests overrides per-path cache settings in versions,\napplies across versions.\nOld API Definition: `cache_options.cache_all_safe_requests`\n",
                  "json_name": "cacheAllSafeRequests",
                  "json_type": "boolean",
                  "go_name": "Cache.CacheAllSafeRequests",
                  "is_array": false
                },
                {
                  "doc": "CacheResponseCodes is an array of response codes which are safe to cache e.g. `404`.\nOld API Definition: `cache_options.cache_response_codes`\n",
                  "json_name": "cacheResponseCodes",
                  "json_type": "number",
                  "go_name": "Cache.CacheResponseCodes",
                  "is_array": true
                },
                {
                  "doc": "CacheByHeaders allows header values to be used as part of the cache key.\nOld API Definition: `cache_options.cache_by_headers`\n",
                  "json_name": "cacheByHeaders",
                  "json_type": "string",
                  "go_name": "Cache.CacheByHeaders",
                  "is_array": true
                },
                {
                  "doc": "EnableUpstreamCacheControl instructs Tyk Cache to respect upstream cache control headers.\nOld API Definition: `cache_options.enable_upstream_cache_control`\n",
                  "json_name": "enableUpstreamCacheControl",
                  "json_type": "boolean",
                  "go_name": "Cache.EnableUpstreamCacheControl",
                  "is_array": false
                },
                {
                  "doc": "ControlTTLHeaderName is the response header which tells Tyk how long it is safe to cache the response for.\nOld API Definition: `cache_options.cache_control_ttl_header`\n",
                  "json_name": "controlTTLHeaderName",
                  "json_type": "string",
                  "go_name": "Cache.ControlTTLHeaderName",
                  "is_array": false
                }
              ],
              "json_type": "object",
              "go_name": "Cache",
              "is_array": false
            }
          ],
          "json_type": "object",
          "go_name": "Global",
          "is_array": false
        },
        {
          "doc": "",
          "json_name": "operations",
          "json_type": "",
          "go_name": "Middleware.Operations",
          "is_array": false
        }
      ],
      "json_type": "object",
      "go_name": "Middleware",
      "is_array": false
    }
  ],
  "json_type": "object",
  "go_name": "XTykAPIGateway",
  "is_array": false
}