// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/TykTechnologies/tyk/certs (interfaces: CertificateManager)
//
// Generated by this command:
//
//	mockgen -destination=./mock/mock.go -package=mock . CertificateManager
//

// Package mock is a generated GoMock package.
package mock

import (
	tls "crypto/tls"
	x509 "crypto/x509"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	certs "github.com/TykTechnologies/tyk/certs"
)

// MockCertificateManager is a mock of CertificateManager interface.
type MockCertificateManager struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateManagerMockRecorder
}

// MockCertificateManagerMockRecorder is the mock recorder for MockCertificateManager.
type MockCertificateManagerMockRecorder struct {
	mock *MockCertificateManager
}

// NewMockCertificateManager creates a new mock instance.
func NewMockCertificateManager(ctrl *gomock.Controller) *MockCertificateManager {
	mock := &MockCertificateManager{ctrl: ctrl}
	mock.recorder = &MockCertificateManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificateManager) EXPECT() *MockCertificateManagerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockCertificateManager) Add(arg0 []byte, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockCertificateManagerMockRecorder) Add(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCertificateManager)(nil).Add), arg0, arg1)
}

// CertPool mocks base method.
func (m *MockCertificateManager) CertPool(arg0 []string) *x509.CertPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertPool", arg0)
	ret0, _ := ret[0].(*x509.CertPool)
	return ret0
}

// CertPool indicates an expected call of CertPool.
func (mr *MockCertificateManagerMockRecorder) CertPool(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertPool", reflect.TypeOf((*MockCertificateManager)(nil).CertPool), arg0)
}

// Delete mocks base method.
func (m *MockCertificateManager) Delete(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", arg0, arg1)
}

// Delete indicates an expected call of Delete.
func (mr *MockCertificateManagerMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCertificateManager)(nil).Delete), arg0, arg1)
}

// FlushCache mocks base method.
func (m *MockCertificateManager) FlushCache() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FlushCache")
}

// FlushCache indicates an expected call of FlushCache.
func (mr *MockCertificateManagerMockRecorder) FlushCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushCache", reflect.TypeOf((*MockCertificateManager)(nil).FlushCache))
}

// GetRaw mocks base method.
func (m *MockCertificateManager) GetRaw(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRaw", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRaw indicates an expected call of GetRaw.
func (mr *MockCertificateManagerMockRecorder) GetRaw(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRaw", reflect.TypeOf((*MockCertificateManager)(nil).GetRaw), arg0)
}

// List mocks base method.
func (m *MockCertificateManager) List(arg0 []string, arg1 certs.CertificateType) []*tls.Certificate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*tls.Certificate)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockCertificateManagerMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCertificateManager)(nil).List), arg0, arg1)
}

// ListAllIds mocks base method.
func (m *MockCertificateManager) ListAllIds(arg0 string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllIds", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// ListAllIds indicates an expected call of ListAllIds.
func (mr *MockCertificateManagerMockRecorder) ListAllIds(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllIds", reflect.TypeOf((*MockCertificateManager)(nil).ListAllIds), arg0)
}

// ListPublicKeys mocks base method.
func (m *MockCertificateManager) ListPublicKeys(arg0 []string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPublicKeys", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// ListPublicKeys indicates an expected call of ListPublicKeys.
func (mr *MockCertificateManagerMockRecorder) ListPublicKeys(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPublicKeys", reflect.TypeOf((*MockCertificateManager)(nil).ListPublicKeys), arg0)
}

// ListRawPublicKey mocks base method.
func (m *MockCertificateManager) ListRawPublicKey(arg0 string) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRawPublicKey", arg0)
	ret0, _ := ret[0].(any)
	return ret0
}

// ListRawPublicKey indicates an expected call of ListRawPublicKey.
func (mr *MockCertificateManagerMockRecorder) ListRawPublicKey(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRawPublicKey", reflect.TypeOf((*MockCertificateManager)(nil).ListRawPublicKey), arg0)
}
