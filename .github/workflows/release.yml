# Generated by: tyk-ci/wf-gen
# Generated on: Tue 11 May 10:11:56 UTC 2021

# Generation commands:
# ./pr.zsh -title files are tricky -repos tyk -branch releng/python -base releng/python -p
# m4 -E -DxREPO=tyk

# Distribution channels covered by this workflow
# - Ubuntu and Debian
# - RHEL/OL
# - tarballs
# - docker hub
# - devenv ECR
# - AWS mktplace
# - Cloudsmith

name: Release

on:
  pull_request:
  push:
    branches:
      - master
      - release-**
      - integration/**
      - feature/**
      - perf/**
    tags:
      - 'v*'

env:
  SLACK_CLI_TOKEN: ${{ secrets.BENDER_TOKEN }}
  
jobs:
  goreleaser:
    runs-on: ubuntu-latest

    container: tykio/golang-cross:1.15.8

    outputs:
      tag: ${{ steps.targets.outputs.tag }}
      upload: ${{ steps.targets.outputs.upload }}
      pc: ${{ steps.targets.outputs.pc }}

    steps:
      - name: Checkout of tyk
        uses: actions/checkout@v2
        with:
          fetch-depth: ${{ ! startsWith(github.ref, 'refs/tags') }}

      - uses: docker/setup-qemu-action@v1

      - uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        if: startsWith(github.ref, 'refs/tags')
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to Cloudsmith
        if: startsWith(github.ref, 'refs/tags')
        uses: docker/login-action@v1
        with:
          registry: docker.tyk.io
          username: ${{ secrets.CLOUDSMITH_USERNAME }}
          password: ${{ secrets.CLOUDSMITH_API_KEY }}

      - name: Unlock agent and set targets
        id: targets
        shell: bash
        env:
          NFPM_STD_PASSPHRASE: ${{ secrets.SIGNING_KEY_PASSPHRASE }}
          GPG_FINGERPRINT: 12B5D62C28F57592D1575BD51ED14C59E37DAC20
          PKG_SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
        run: |
          bin/unlock-agent.sh
          DOCKER_CFG_PATH="${DOCKER_CONFIG:-$HOME/.docker}/config.json"
          jq '. + {"experimental": "enabled"}' "$DOCKER_CFG_PATH" > c.json && mv c.json "$DOCKER_CFG_PATH" || rm c.json
          current_tag=${GITHUB_REF##*/}
          echo "::set-output name=tag::${current_tag}"
          if [[ $current_tag =~ .+-(qa|rc).* ]]; then
                  echo "::set-output name=upload::true"
                  echo "::set-output name=pc::tyk-gateway-unstable"
                  echo "::debug file=.goreleaser.yml::Pushing to unstable repos"
          # From https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string
          # If this is a public release, the tag is of the form vX.Y.Z where X, Y, Z ∈ ℤ
          elif [[ $current_tag =~ v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*) ]]; then
                  echo "::set-output name=upload::true"
                  echo "::set-output name=pc::tyk-gateway"
                  echo "::debug file=.goreleaser.yml::Pushing to stable repos"
          else
                  echo "::set-output name=upload::false"
                  echo "::debug file=.goreleaser.yml::No uploads"
          fi

      - name: Delete old release assets
        if: startsWith(github.ref, 'refs/tags')
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ github.token }}
          tag: ${{ github.ref }}
          fail-if-no-assets: false
          fail-if-no-release: false
          assets: |
            *.deb
            *.rpm
            *.tar.gz
            *.txt.sig
            *.txt

      - name: goreleaser from golang-cross
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CGO_ENABLED: 1
          NFPM_STD_PASSPHRASE: ${{ secrets.SIGNING_KEY_PASSPHRASE }}
          NFPM_PAYG_PASSPHRASE: ${{ secrets.SIGNING_KEY_PASSPHRASE }}
          GPG_FINGERPRINT: 12B5D62C28F57592D1575BD51ED14C59E37DAC20
          PKG_SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
        shell: bash
        run: |
          snapshot="--snapshot"
          if [[ ${{steps.targets.outputs.tag}} = $(git describe --tags) ]]; then
              snapshot=""
          fi
          goreleaser release --rm-dist $snapshot

      - uses: actions/upload-artifact@v2
        with:
          name: deb
          retention-days: 1
          path: dist/*.deb

      - uses: actions/upload-artifact@v2
        with:
          name: rpm
          retention-days: 1
          path: dist/*.rpm

  ci:
    needs:
      - goreleaser
    runs-on: ubuntu-latest

    steps:
      - name: Shallow checkout of tyk
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Get AWS creds from Terraform remote state
        id: aws-creds
        run: |
          cd integration/terraform
          terraform init -input=false
          terraform refresh 2>&1 >/dev/null
          eval $(terraform output -json tyk | jq -r 'to_entries[] | [.key,.value] | join("=")')
          region=$(terraform output region | xargs)
          [ -z "$key" -o -z "$secret" -o -z "$region" ] && exit 1
          echo "::set-output name=secret::$secret"
          echo "::set-output name=key::$key"
          echo "::set-output name=region::$region"

      - name: Configure AWS credentials for use
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ steps.aws-creds.outputs.key }}
          aws-secret-access-key: ${{ steps.aws-creds.outputs.secret }}
          aws-region: ${{ steps.aws-creds.outputs.region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - uses: actions/download-artifact@v2
        with:
          name: deb

      - uses: docker/setup-qemu-action@v1

      - uses: docker/setup-buildx-action@v1

      - name: CI build
        uses: docker/build-push-action@v2
        with:
          push: true
          context: "."
          file: Dockerfile.std
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/tyk:${{ needs.goreleaser.outputs.tag }}
            ${{ steps.login-ecr.outputs.registry }}/tyk:${{ github.sha }}

      - name: Tell gromit about new build
        id: gromit
        run: |
          curl -fsSL -H "Authorization: ${{secrets.GROMIT_TOKEN}}" 'https://domu-kun.cloud.tyk.io/gromit/newbuild' \
                 -X POST -d '{ "repo": "${{ github.repository}}", "ref": "${{ github.ref }}", "sha": "${{ github.sha }}" }'

      - name: Tell integration channel
        if: ${{ failure() }}
        run: |
          colour=bad
          pretext=":boom: Could not add new build $${{ github.ref }} from ${{ github.repository }} to CD. Please review this run and correct it if needed. See https://github.com/TykTechnologies/tyk-ci/wiki/IntegrationEnvironment for what this is about."
          curl https://raw.githubusercontent.com/rockymadden/slack-cli/master/src/slack -o /tmp/slack && chmod +x /tmp/slack
          /tmp/slack chat send \
          --actions '{"type": "button", "style": "primary", "text": "See log", "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' \
          --author 'Bender' \
          --author-icon 'https://hcoop.net/~alephnull/bender/bender-arms.jpg' \
          --author-link 'https://github.com/TykTechnologies/tyk-ci' \
          --channel '#integration' \
          --color $colour \
          --fields '{"title": "Repo", "value": "${{ github.repository }}", "short": false}' \
          --footer 'github-actions' \
          --footer-icon 'https://assets-cdn.github.com/images/modules/logos_page/Octocat.png' \
          --image 'https://assets-cdn.github.com/images/modules/logos_page/Octocat.png' \
          --pretext "$pretext" \
          --text 'Commit message: ${{ github.event.head_commit.message }}' \
          --title 'Failed to add new build for CD' \
          --title-link 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'

  install-deb:
    runs-on: ubuntu-latest
    needs: goreleaser
    strategy:
      matrix:
        distro:
          - ubuntu:xenial
          - ubuntu:bionic
          - ubuntu:focal
          - debian:jessie
          - debian:stretch
          - debian:buster

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: deb

      - uses: docker/setup-buildx-action@v1

      - name: generate dockerfile
        run: |
          echo 'FROM ${{ matrix.distro }}
          COPY tyk-gateway*_amd64.deb /tyk-gateway.deb
          RUN dpkg -i /tyk-gateway.deb && /opt/tyk-gateway/tyk --conf=/opt/tyk-gateway/tyk.conf &' > Dockerfile

      - name: install on ${{ matrix.distro }}
        uses: docker/build-push-action@v2
        with:
          context: "."
          file: Dockerfile
          push: false

  install-rpm:
    needs: goreleaser
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distro:
          - ubi7/ubi:7.9
          - ubi8/ubi:8.3

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: rpm

      - uses: docker/setup-buildx-action@v1

      - name: generate dockerfile
        run: |
          echo 'FROM registry.access.redhat.com/${{ matrix.distro }}
          COPY tyk-gateway*_x86_64.rpm /tyk-gateway.rpm
          RUN rpm -ih /tyk-gateway.rpm && /opt/tyk-gateway/tyk --conf=/opt/tyk-gateway/tyk.conf &' > Dockerfile

      - name: install on ${{ matrix.distro }}
        uses: docker/build-push-action@v2
        with:
          context: "."
          file: Dockerfile
          push: false

  packagecloud:
    if: needs.goreleaser.outputs.upload == 'true'
    needs:
      - goreleaser
      - install-deb
      - install-rpm
    runs-on: ubuntu-latest

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: deb
          path: dist

      - uses: actions/download-artifact@v2
        with:
          name: rpm
          path: dist

      - name: Push to packagecloud
        id: pc-push
        uses: TykTechnologies/packagecloud-action@main
        env:
          PACKAGECLOUD_TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}
        with:
          repo: tyk/${{ needs.goreleaser.outputs.pc }}
          dir: dist

      - name: Tell release channel
        if: always()
        run: |
          colour=bad
          pretext=":boom: Failed to push packages to ${{ needs.gorelease.outputs.pc }} for $${{ github.ref }}. Please review this run and correct it if needed."
          if [[ ${{ steps.pc-push.outcome }} == "success" ]]; then
              colour=good
              pretext="Please review the draft release at https://github.com/${{ github.repository }}/releases and delete if not required."
          fi

          curl https://raw.githubusercontent.com/rockymadden/slack-cli/master/src/slack -o /tmp/slack && chmod +x /tmp/slack
          /tmp/slack chat send \
          --actions '{"type": "button", "style": "primary", "text": "See log", "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' \
          --author 'Bender' \
          --author-icon 'https://hcoop.net/~alephnull/bender/bender-arms.jpg' \
          --author-link 'https://github.com/TykTechnologies/tyk-ci' \
          --channel '#release' \
          --color $colour \
          --fields '{"title": "Repo", "value": "${{ needs.goreleaser.outputs.pc }}", "short": false}' \
          --footer 'github-actions' \
          --footer-icon 'https://assets-cdn.github.com/images/modules/logos_page/Octocat.png' \
          --image 'https://assets-cdn.github.com/images/modules/logos_page/Octocat.png' \
          --pretext "$pretext" \
          --text 'Commit message: ${{ github.event.head_commit.message }}' \
          --title 'New version ${{ needs.goreleaser.outputs.tag }} for ${{ needs.goreleaser.outputs.pc }}' \
          --title-link 'https://packagecloud.io/tyk/${{ needs.goreleaser.outputs.pc }}/'

  # AWS updates only for stable releases
  aws-mktplace-byol:
    if: startsWith(github.ref, 'refs/tags/v3.0')
    runs-on: ubuntu-latest
    needs:
      - goreleaser
      - install-deb
      - install-rpm
    strategy:
      matrix:
        flavour:
          - al2
          - rhel

    steps:
      - name: Checkout tyk
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - uses: actions/download-artifact@v2
        with:
          path: aws

      - name: Packer build
        working-directory: ./aws
        run: |
          export VERSION=${{ needs.goreleaser.outputs.tag }}
          packer validate -var-file=${{ matrix.flavour }}.vars.json byol.pkr.hcl
          packer build -var-file=${{ matrix.flavour }}.vars.json byol.pkr.hcl



