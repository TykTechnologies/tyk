# Generated by: tyk-ci/wf-gen
# Generated on: Thu 25 Feb 18:22:04 UTC 2021

# Generation commands:
# ./pr.zsh -title no version metadata -branch goreleaser/all-tags -p
# m4 -E -DxREPO=tyk

# Distribution channels covered by this workflow
# - Ubuntu and Debian
# - RHEL/OL
# - tarballs
# - docker hub
# - devenv ECR
# - AWS mktplace

name: Release

on:
  pull_request:
  push:
    branches:
      - master
      - release-**
    tags:
      - 'v*'

jobs:
  login:
    runs-on: ubuntu-latest
    outputs:
      key: ${{ steps.aws-creds.outputs.key }}
      secret: ${{ steps.aws-creds.outputs.secret }}
      ecr: ${{ steps.aws-creds.outputs.ecr }}
      region: ${{ steps.aws-creds.outputs.region }}
      image_tag: ${{ steps.aws-creds.outputs.image_tag }}

    steps:
      - name: Checkout tyk
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Get AWS creds from Terraform remote state
        id: aws-creds
        run: |
            cd integration/terraform
            terraform init -input=false -lock=false
            terraform refresh
            eval $(terraform output -json tyk | jq -r 'to_entries[] | [.key,.value] | join("=")')
            region=$(terraform output region | xargs)
            [ -z "$key" -o -z "$secret" -o -z "$region" -o -z "$ecr" ] && exit 1
            echo "::set-output name=secret::$secret"
            echo "::set-output name=key::$key"
            echo "::set-output name=ecr::$ecr"
            echo "::set-output name=region::$region"
            echo "::set-output name=image_tag::${GITHUB_REF##*/}"

  int-image:
    runs-on: ubuntu-latest
    needs: [ login ]

    steps:
      - name: Checkout tyk
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Configure AWS credentials for use
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ needs.login.outputs.key }}
          aws-secret-access-key: ${{ needs.login.outputs.secret }}
          aws-region: ${{ needs.login.outputs.region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build integration tarball
        run: |
            if [ -x bin/integration_build.sh ]; then
               SIGNPKGS=0 BUILDPKGS=0 BUILDWEB=0 ARCH=amd64 bin/integration_build.sh
               cp tyk-amd64-*.tar.gz integration/image/tyk.tar.gz
            fi

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ needs.login.outputs.ecr }}
          IMAGE_TAG: ${{ needs.login.outputs.image_tag }}
        run: |
            docker build -t ${ECR_REGISTRY}:${IMAGE_TAG} \
                         -t ${ECR_REGISTRY}:latest \
                         -t ${ECR_REGISTRY}:${GITHUB_SHA} \
                         integration/image
            docker push --all-tags $ECR_REGISTRY

      - name: Tell gromit about new build
        run: |
            curl -fsSL -H "Authorization: ${{secrets.GROMIT_TOKEN}}" 'https://domu-kun.cloud.tyk.io/gromit/newbuild' \
                 -X POST -d '{ "repo": "${{ github.repository}}", "ref": "${{ github.ref }}", "sha": "${{ github.sha }}" }'

  goreleaser:
    runs-on: ubuntu-latest
    needs: [ login ]
    container: tykio/golang-cross:1.15.8

    steps:
      - name: Checkout tyk
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Configure AWS credentials for use
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ needs.login.outputs.key }}
          aws-secret-access-key: ${{ needs.login.outputs.secret }}
          aws-region: ${{ needs.login.outputs.region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Login to DockerHub
        if: startsWith(github.ref, 'refs/tags')
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Unlock agent
        env:
          NFPM_STD_PASSPHRASE: ${{ secrets.SIGNING_KEY_PASSPHRASE }}
          GPG_FINGERPRINT: 12B5D62C28F57592D1575BD51ED14C59E37DAC20
          PKG_SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
        run: |
          /unlock-agent.sh

      - uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CGO_ENABLED: 1
          NFPM_STD_PASSPHRASE: ${{ secrets.SIGNING_KEY_PASSPHRASE }}
          NFPM_PAYG_PASSPHRASE: ${{ secrets.SIGNING_KEY_PASSPHRASE }}
          GPG_FINGERPRINT: 12B5D62C28F57592D1575BD51ED14C59E37DAC20
          PKG_SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
          IMAGE_TAG: ${{ needs.login.outputs.image_tag }}
          ECR_REGISTRY: ${{ needs.login.outputs.ecr }}

      - name: Push to tyk-gateway-unstable
        if: startsWith(github.ref, 'refs/heads')
        uses: TykTechnologies/packagecloud-action@main
        env:
          PACKAGECLOUD_TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}
        with:
          repo: 'tyk/tyk-gateway-unstable'
          dir: 'dist'

      - name: Push to tyk-gateway
        if: startsWith(github.ref, 'refs/tags')
        uses: TykTechnologies/packagecloud-action@v1
        env:
          PACKAGECLOUD_TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}
        with:
          repo: 'tyk/tyk-gateway'
          dir: 'dist'

      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

# AWS mktplace update only for LTS releases
  aws-mktplace-byol:
    if: startsWith(github.ref, 'refs/tags/v3.0')
    needs: [ goreleaser ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        flavour:
          - al2
          - rhel

    steps:
      - name: Packer build
        working-directory: ./aws
        run: |
          export VERSION=${GITHUB_REF##*/}
          packer validate -var-file=${{ matrix.flavour }}.vars.json byol.pkr.hcl
          packer build -var-file=${{ matrix.flavour }}.vars.json byol.pkr.hcl


